//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Packages/com.nuro.vrweb.developertk/Runtime/InputActions/VrWeb Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Packages/com.nuro.vrweb.developertk/Runtime/InputActions/VrWeb Input Actions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @VrWebInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @VrWebInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VrWeb Input Actions"",
    ""maps"": [
        {
            ""name"": ""XRI Head"",
            ""id"": ""09ff3ccc-21b4-4346-a3a2-7c978b5af892"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""1a9029f8-7a46-46b9-9eff-e9ae8365f611"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GazePosition"",
                    ""type"": ""Value"",
                    ""id"": ""e34ee3d7-fa3a-4849-8817-f9128722103f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""aed87fe6-2b01-4dd2-a8fa-195578fd8158"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GazeRotation"",
                    ""type"": ""Value"",
                    ""id"": ""fc29620e-0e68-4bd1-96db-9dceb66598e9"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""6bb4e248-e42b-47c3-b66c-79566508ca74"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""08654a17-c094-4bbd-8946-415ae4ce2406"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ViewVRMode"",
                    ""type"": ""Button"",
                    ""id"": ""7343af02-ad3b-4af8-b2ea-b25ff58210cf"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View1stPersonMode"",
                    ""type"": ""Button"",
                    ""id"": ""3cc7d13b-21e6-43b2-b537-6d13085aa0ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View3rdPersonMode"",
                    ""type"": ""Button"",
                    ""id"": ""a3542046-880d-4956-8041-4a4965c71449"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cff1f981-6e1f-4e2c-a90c-715a0ea2e80e"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2017383-a3f6-4c46-acb1-012b8eece9cc"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43a7b1a1-e99a-4346-a058-5b68c535729d"",
                    ""path"": ""<XRHMD>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15eff92f-dac7-4e6e-986c-08b3f1e73fac"",
                    ""path"": ""<XRHMD>/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6efeddc-ac0b-45df-a0c8-e99c6b99cd6a"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ViewVRMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84f5506c-b7fe-462f-9d6c-67035c6516fd"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""View1stPersonMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""075439c2-75b6-4bd7-8c2e-1870c7cd8ee9"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""View3rdPersonMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82cb9bbb-830a-48fb-83f3-f766661e5531"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""GazePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37f45113-de61-41f8-b7ef-8783ca32a3f4"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""GazeRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI LeftHand"",
            ""id"": ""5fe596f9-1b7b-49b7-80a7-3b5195caf74d"",
            ""actions"": [
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""82eb6741-beef-48d3-83ab-a957dc1caa1e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""d20fc51c-7916-43a7-8b03-706049966aea"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""664a62b0-e178-421d-b3f8-014eec01591d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim Position"",
                    ""type"": ""Value"",
                    ""id"": ""c73a0160-3d9b-4dde-96f9-6a390e68778c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""f208faac-e869-4280-ac9c-9b3d0ab819bb"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Flags"",
                    ""type"": ""Value"",
                    ""id"": ""f98e71db-49b4-4882-8991-a0e386733e87"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Position"",
                    ""type"": ""Value"",
                    ""id"": ""cac52a91-5970-4ad2-8c86-a8c0e91a1837"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Position"",
                    ""type"": ""Value"",
                    ""id"": ""4c557d81-3795-4355-a83e-6f886221d011"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""0565b7f7-f841-4395-98df-a77f4dd6d9c9"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""1f6aa20d-6405-4728-8275-381f13795d8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thumbstick"",
                    ""type"": ""Value"",
                    ""id"": ""c7aaa530-3b1c-4345-8fd2-064a229f46d7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""d7f49cc8-d57d-45f6-83da-5c901ea63889"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""60a1ed00-a044-49dc-826d-e29b18269607"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""acdf9550-5529-4ff7-8558-73ecdf0d75bd"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97a0351f-659b-482a-8fa0-19015ccd055e"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34454fec-7610-497a-b1a5-d3d5f01b312c"",
                    ""path"": ""<XRHandDevice>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28df8d2f-b563-4377-bd11-6c8932ee591c"",
                    ""path"": ""<MetaAimHand>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2623b909-75bd-40da-97bd-ae1ecfb0a89b"",
                    ""path"": ""<MetaAimHand>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7a37505-52bd-4a96-8f88-c761a62a71e7"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""017a01a2-6e1a-4b39-9b5e-e115d5d2dd6a"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ab4651e-837c-4352-9055-6671517f1917"",
                    ""path"": ""<XRHandDevice>{LeftHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1de7b81-80d1-4207-8f19-4fb96a537bb3"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9f33fe3-b3bf-48c1-a8bc-dd6a4ddfba94"",
                    ""path"": ""<XRHandDevice>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""286f44f6-74a5-4f92-8468-42445c7a3cb8"",
                    ""path"": ""<MetaAimHand>{LeftHand}/aimFlags"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Flags"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2a21d18-2a87-44b9-b4fc-e97863e4e368"",
                    ""path"": ""<XRController>{LeftHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4107576d-00a8-4c36-9801-8d04bbd07203"",
                    ""path"": ""<XRInputV1::Oculus::OculusTouchControllerOpenXR>/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0477e72c-d5ba-472c-9b20-52a338a55670"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Generic XR Controller"",
                    ""action"": ""Thumbstick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5efaabae-57c7-416d-a5f1-e87ef51a19b1"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55b1b619-b2f2-4da1-87aa-5349e1910ba3"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI LeftHand Interaction"",
            ""id"": ""7a5e7537-cc30-4eb1-a544-6946baa8f3eb"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""33754c03-48ec-46ef-9bc6-22ed6bfdd8e8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Value"",
                    ""type"": ""Value"",
                    ""id"": ""e6005f29-e4c1-4f3b-8bf7-3a28bab5ca9c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""0c0991c5-d329-4afc-8892-1076b440477c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Value"",
                    ""type"": ""Value"",
                    ""id"": ""0c3d0ec9-85a1-45b3-839b-1ca43f859ecd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""7e1eced7-c774-4fe5-be8f-d8711f646d9e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press Value"",
                    ""type"": ""Value"",
                    ""id"": ""f241c1aa-1050-4338-b2bf-a4a47776693d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""a5372626-7022-4ba7-b152-6f26318fd8a8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""21b75b25-12ad-410f-b4f8-a7745b7aca27"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""4b3bb4bc-78e4-4421-92e8-6ce96ae2dd53"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Directional Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""2edc6182-8130-4a1a-a3c5-0672af1a9805"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""06ae97bd-7195-4bfc-b23e-b834c9787b12"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71a4d23f-3e9a-4513-923b-ba388c5e84bf"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73325635-d9e5-481a-9279-ae7be089422d"",
                    ""path"": ""<MetaAimHand>{LeftHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49a23327-a116-48c0-8af9-0d2c50c15a88"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""304be843-4b23-45d9-89fa-005ac163d9b9"",
                    ""path"": ""<MetaAimHand>{LeftHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""487f4f2e-9e9b-49aa-b0f2-4037a24624f5"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b8b1b59-2fdc-4998-8259-50341075d9a2"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b34c79c1-ab5e-4851-87ac-abc43705eae0"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5bf6a12-a026-46d1-a793-7252c49aaf66"",
                    ""path"": ""<MetaAimHand>{LeftHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71d94579-1bf4-4034-ab9e-e7166842128f"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d250c9be-4bf2-4b5c-8962-4fcf5d53bdb3"",
                    ""path"": ""<MetaAimHand>{LeftHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b30ca4b-9f98-4a44-9af5-a89412d5cdc8"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""482daacc-8f7f-4712-b08b-dce9615a406c"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""783146a1-efc2-4a23-acef-8403f70c48f6"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Directional Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb42d497-ca75-4681-bad8-3d640aef05f5"",
                    ""path"": ""<XRController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9180ec02-a1e1-4cf4-b01e-5b0bc6eb7996"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0),StickDeadzone"",
                    ""groups"": "";Generic XR Controller"",
                    ""action"": ""Rotate Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI LeftHand Locomotion"",
            ""id"": ""22336389-9fb1-4c2c-8635-0ed30db0d29e"",
            ""actions"": [
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Value"",
                    ""id"": ""cbeaf823-3b69-4004-8ec8-13ea2ca3fc31"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Value"",
                    ""id"": ""a21db72c-4843-4839-b4d0-3ce8d287cb86"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""89ce8348-6001-41a3-85b9-f8f2e2dcad7c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Direction"",
                    ""type"": ""Value"",
                    ""id"": ""93bd97c5-fd23-4853-8045-1b12324aa24e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9693e25f-8a4f-4aed-842f-3961243c69a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab Move"",
                    ""type"": ""Button"",
                    ""id"": ""c5a6d766-d487-42ae-b293-da4749469e18"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Snap Turn"",
                    ""type"": ""Value"",
                    ""id"": ""8c14e969-a054-4f12-840c-4e0bd85173d9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""95fa1419-ca7b-4c8a-8d15-7d46e58d82e3"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8da6ed3a-f621-49fe-8c76-1f6b7d7754d6"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8aebee7-fa03-43d4-bfb7-77a3f87452cc"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e383b1a-270f-4c20-819b-89a59cffb498"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Generic XR Controller;Noncontinuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5fe0ed53-b4d3-4cd8-b567-397a7d1e1c6a"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Teleport Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e2fa814-8cbd-4c65-a60d-a1503f30ffd8"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a46b49d0-0754-4dac-a9a5-a822e10751f2"",
                    ""path"": ""<XRController>{LeftHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=2),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller;Noncontinuous Move"",
                    ""action"": ""Snap Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI RightHand"",
            ""id"": ""7960f8ef-2bf3-4281-aecc-4c03809d6c8c"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""c4990d70-7b8a-4ce1-b03c-da86716b8352"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ee6bf5bf-bb0a-4a50-8327-cb654b19e298"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Is Tracked"",
                    ""type"": ""Button"",
                    ""id"": ""a705ffe4-b2c8-4b78-847f-25257d4e30af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""167ea203-5bfb-4d74-bde9-8026b7483102"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""57b2a1b4-3290-46d6-ac07-4854ee8f91b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim Position"",
                    ""type"": ""Value"",
                    ""id"": ""daf49d5d-4ba8-4bf7-9010-e7cae2096907"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""148c182f-63ef-4709-8057-f6ea8070cb5c"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim Flags"",
                    ""type"": ""Value"",
                    ""id"": ""93a75a21-033e-440c-9954-ff264afb2db9"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pinch Position"",
                    ""type"": ""Value"",
                    ""id"": ""7a2e5dcd-3e49-4622-90ea-6607994f2be0"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Position"",
                    ""type"": ""Value"",
                    ""id"": ""496d56bd-afd7-495b-a326-16e4ef742bc1"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Poke Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""3767652c-5427-421b-8f8d-660106453cb1"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""acf22f4a-8ad5-43a1-b2a3-36fae997a7f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thumbstick"",
                    ""type"": ""Value"",
                    ""id"": ""497c1042-a1f2-47da-af4f-21ebfa68354d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""18b76f33-831a-49cf-aad6-fd4d6bbbe5f8"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34066404-dd01-4909-81e5-882459c6295f"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6011e1e6-b2dd-4cb1-8da5-29b03868f2c5"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03ccbaec-eeca-4fc4-8281-ee1758b4eb9b"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""714d1173-f908-4bca-951c-4adb4eb7b4c5"",
                    ""path"": ""<XRHandDevice>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd822fc8-c655-4a4d-87d0-9575760b6dca"",
                    ""path"": ""<MetaAimHand>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bb1158a-2d78-446b-9351-6f9b3f1364cb"",
                    ""path"": ""<MetaAimHand>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21413a94-0048-4112-b433-a770f183f592"",
                    ""path"": ""<XRHandDevice>{RightHand}/pinchPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Pinch Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e847fad-7431-4e48-883a-d489fca4ce0d"",
                    ""path"": ""<XRHandDevice>{RightHand}/pokePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99b19b88-e2ad-4670-91ee-1f55f6c34a69"",
                    ""path"": ""<XRHandDevice>{RightHand}/pokeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Poke Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1de48aee-890b-4dbb-a02d-51df9bd39db7"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a0c4fe0-639a-44e0-beeb-4e11e0dea7ef"",
                    ""path"": ""<XRHandDevice>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Is Tracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5469d4d1-9645-4397-a596-d74f876eafc2"",
                    ""path"": ""<MetaAimHand>{RightHand}/aimFlags"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Aim Flags"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e778af6-e0b6-43f0-a7d1-27997846932f"",
                    ""path"": ""<XRController>{RightHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56f2b7cb-4f0f-42a0-8da7-1df1afb14e8b"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Generic XR Controller"",
                    ""action"": ""Thumbstick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI RightHand Interaction"",
            ""id"": ""461bce25-7762-40c5-b639-f190649be6d6"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""ac96c10b-c955-4a46-8e67-bf16bc069b53"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Value"",
                    ""type"": ""Value"",
                    ""id"": ""39bbf1ac-21a3-413d-90f6-6dbf6efeaabe"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""41976d89-60de-4deb-bff9-16b4af96b290"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Value"",
                    ""type"": ""Value"",
                    ""id"": ""c3ca6ed7-3d25-44a2-b1d8-5be4eb699370"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Press"",
                    ""type"": ""Button"",
                    ""id"": ""65174b45-c2ee-4f90-93bb-fb4084eaaab3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UI Press Value"",
                    ""type"": ""Value"",
                    ""id"": ""962ac033-ec42-4981-88a4-551ad9be6ecb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UI Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""c283b939-751f-426e-8462-142a529993e3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""9b5d8312-f609-4895-b70f-81a722b2ae11"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Translate Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""d118127c-7911-4654-8c48-730a2cd0f3f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Directional Manipulation"",
                    ""type"": ""Value"",
                    ""id"": ""6f7cf253-7062-443b-b10f-2be48a33f027"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""dc243598-45ca-4b45-9bb9-ca72de6470e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ce80054-410d-4112-a332-50faa7fb4f23"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d5b47ea-64e3-4b99-b620-de6c360908be"",
                    ""path"": ""<MetaAimHand>{RightHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd433817-216c-46b9-8dd3-f3a4ea1767b9"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""770a07b5-a199-4342-b4a5-b3baafbe2bcb"",
                    ""path"": ""<MetaAimHand>{RightHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Select Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa59aed1-ae0b-4074-a58c-294b85f46228"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""150f414f-61bf-47b1-b4f8-f772a2a40565"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Activate Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92bb5b8f-bf48-4dab-af05-50a865773895"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1652c26e-d835-461f-b46b-55b146fd9bba"",
                    ""path"": ""<MetaAimHand>{RightHand}/indexPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b4ef08d-9ddd-4f0a-8539-d1114d14d143"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""620cd3c3-a8c2-4a24-825a-ef6eb1cb41ef"",
                    ""path"": ""<MetaAimHand>{RightHand}/pinchStrengthIndex"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Press Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c0fa06c-b670-477f-a95d-eb3b4880e439"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(y=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotate Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""021dbe56-091b-4cde-b419-c2c650fc3909"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0),StickDeadzone"",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Translate Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4caf4e8d-13e5-4bd6-8f42-b6b99c315ad0"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Directional Manipulation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af6fd279-2f48-4f51-8e9d-29b0b9d926f8"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""UI Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a52cb418-c132-4c1e-89ed-466d302da946"",
                    ""path"": ""<XRController>{RightHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI RightHand Locomotion"",
            ""id"": ""99ce76d3-82c5-4289-9670-2ecffa6833fd"",
            ""actions"": [
                {
                    ""name"": ""Teleport Direction"",
                    ""type"": ""Value"",
                    ""id"": ""b950a329-6492-4e29-b563-afc726f81e95"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""00a4dc9f-1ee6-4349-b0e9-72d5dccaadd6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab Move"",
                    ""type"": ""Button"",
                    ""id"": ""cfb29d37-3db0-4e5d-a73b-7d48a19e279e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Snap Turn"",
                    ""type"": ""Value"",
                    ""id"": ""44441ad6-5762-466d-ad54-aa44fcd61a5c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Activate"",
                    ""type"": ""Button"",
                    ""id"": ""bf529248-2b04-41b0-b302-e7490535be21"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Value"",
                    ""id"": ""2c49bfd6-9b94-4c6f-b968-f137f7bbc439"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""022046aa-be71-4288-859d-6dd42844f6e6"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": "";Generic XR Controller;Noncontinuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4b46d7d-8231-4672-83f9-75af565faf57"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Noncontinuous Move"",
                    ""action"": ""Teleport Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ecb549e-ab98-4a4b-b979-38068fe3b811"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Grab Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31d838df-4d4e-4c16-a373-b9c07d9d2e2a"",
                    ""path"": ""<XRController>{RightHand}/Primary2DAxis"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=2),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller;Noncontinuous Move"",
                    ""action"": ""Snap Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69250261-aac9-45bb-a326-b76a89204c4f"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": "";Generic XR Controller"",
                    ""action"": ""Teleport Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15eead56-e6ac-46ae-b71a-25a994bb9f90"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": "";Generic XR Controller"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRI UI"",
            ""id"": ""edd65a7c-601c-4915-8307-025a081d8790"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c9a92aca-49d5-4910-8ade-8e994f0a31f0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""eba98c2e-6268-4233-bb88-946287bc753c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""448b396b-0885-4543-ac5a-8b3405da6791"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""682022c0-857a-4332-8753-7f8fcdf84d37"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b194cd98-7e4f-457a-a60c-cebc25dc32a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bd7fc534-75e3-489d-94fb-3d45cb78d8f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cc5f5666-a75c-4dfc-8566-ded8ec9b4ae3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""533aeb95-18b2-4a83-a69d-f6e0be72ff8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e87fa299-8441-4620-89dd-0564c7d552e2"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""445a013e-9c17-48a2-9856-067e4826df03"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05c1e38e-79dd-41cb-95d5-74f42e65d92f"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57909bb4-1088-4975-9227-ecc87a305257"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2740386d-d4b6-4342-903c-d9390783f04a"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6fd3bb5-c747-4eba-b599-1c6d7c738e2a"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb2286cc-fa20-4564-bff6-9f790f12cf6b"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54eb7da2-546a-4d75-bfcc-ae38be303a59"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""4c9a5170-d325-45ee-8ef9-fc12d1f5a97e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c846c708-b27e-4ac9-9a83-c80ac5c263d5"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""caf2fb01-3e95-47c1-8663-315057149d48"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""830d65e9-887d-45b4-8386-562deb29e465"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e5c71442-9909-46d8-aa56-8fa3574a8227"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""210246e8-c3c4-4edc-be9c-1916858346df"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fb701ef0-9910-4639-80d1-2c1c03f871ed"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3de9f409-fb44-4311-8705-b4f4e7cd3029"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bd001ba1-d6a2-4a97-9c87-36b5b92728af"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fcc0a2cd-a126-43ad-bb1e-ffc1ae7668c7"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""65cbb13a-6e00-4973-9887-e49e06575091"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3c5803e2-42d0-4d48-bbd6-41ce4442df0b"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d5b1219c-0df6-4bc5-ad11-205b748cade4"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""065d2394-f10a-46df-b6cb-2c56a6c842ea"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""29921809-7785-44a1-a316-e96307174552"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""49817cc8-fecc-406d-a187-6393de317e95"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ef33431d-17d0-4e1c-90f2-bbaa2ef9a8b7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5ddfdce2-0f11-4f4e-8931-0ae6fb289ac7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5ceab4e0-1600-4bfb-acf6-8d02c4e10aea"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""94e10d8b-5bfa-439d-afae-b975efac2b7b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9fc7d14a-385d-4ca5-b185-906e049b7eed"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d7e5e0c4-05dc-4f2f-8649-a66fe843caed"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""76ab9656-e168-4b2c-9a6b-d8d6da981e4f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ad7bc5b3-6ada-42a2-9cba-5c7334cba7be"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9f2a7c29-a588-4b6a-a966-955eb408c526"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27c38d86-31fc-4120-b1fc-582349b210ae"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14dea343-eb83-45a3-9531-40fe3897d48b"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67f51768-1493-4444-b118-82d398a16fdd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""198e6869-709e-448d-96d4-27186c9d56e6"",
                    ""path"": ""<Touchscreen>/touch*/click"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""699d260a-22da-4196-a942-6f9c8238fb10"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3345936c-b0e2-4f05-8dfe-66755699d78f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""0fbab267-ac15-44e2-8373-3a4233ffcd05"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""ffbc3571-225d-4cad-9727-157a370068ed"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8ef5e455-f401-4eaa-89b1-801c462b94ca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ab6ca993-57dd-4abb-80e7-3de2cc3b76d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScrollWheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""aa6cc838-944c-42a2-aa2b-fdf56dd8f8e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9b7b13df-108a-4941-9416-074e63959912"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b696310b-8469-4b82-8cee-352d23b729ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d165a85d-ff4d-4b0f-91d1-db25c26ca110"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2add0fc-4705-49e4-a700-9de05cc9766c"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67ae7433-e548-4243-a363-9aa55a753075"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af1711ba-ef4a-4bfc-81cf-55fe7d13975d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acf0d556-0d0d-4175-b9af-cdc7b5f87486"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15bc4b0e-f77f-4ece-98a8-2973617f0fe1"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75a411b3-75fe-49e3-a40c-78f3c5b6d337"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7be27d18-572b-4db9-9015-d6d55e66132a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""b86ac72f-3afb-4a82-9d07-a9c78fac36bf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4ebc52fd-004a-422d-8141-393f2111801d"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""34aa8dfe-1370-40a2-8139-e317d2aa45b7"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""05f663ff-66a8-4f62-a82a-08785f0715b6"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""edf4710a-9628-4daa-9009-7ac455ecdc2f"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7e9307e6-f4f3-4905-bfa2-a08e25df5be1"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""34e167eb-6e71-43f7-a33a-f5b4168feae3"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""71ecb591-347b-48d3-8f83-af9f99722af3"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5ad8d929-a17c-4175-8945-f887350d0978"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ede21768-b93f-4235-a219-d40dae78a63f"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""1e8ddefd-e575-406c-9747-1129dc0605c1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""edf6f9dd-be60-4d08-ab12-e916c5db7da0"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""08a5ab17-2684-4ad2-b6dd-81b5a82b7a92"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1dcb4fb0-69ec-44cd-800d-f3845e5459be"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9968b5dd-b048-4b8f-89c3-5b8641a38d0d"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""f96793e3-a74d-45cf-8475-723c48dee30c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4fd80add-170d-4a92-9ab7-447de20c36d9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ca99b4bd-0d94-4937-8392-b27274d7948a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bed202d4-0a6e-41ae-8b9d-e5ae09053b28"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ffa805b8-bab0-411e-99bd-2c8336d73c90"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e62429b3-52ad-45e0-81fa-b7ea6df98a04"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""401ba27d-41b5-48d3-a41d-d9b479cfff51"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""48921e81-6c16-4863-b8e4-f6ad4cdecbdc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b3b78450-44b3-43f7-bb0e-7be2e4df8123"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c41f37d9-48e9-45a2-886a-fc9130ec80f3"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a48e0c3-0ffa-49d5-9242-1c45af479b00"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6c75516-9ed5-426f-a77e-df506aee9507"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bebfed3c-cad6-4281-b742-3eaa61df6061"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""629b5a61-2ac5-4100-9258-9451ebb066b8"",
                    ""path"": ""<Touchscreen>/touch*/click"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""e293f9ef-1f3e-46c4-b8e5-b06c89b1a516"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ae67dc1f-a648-44fc-8421-c528bb237d5e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""c5340941-a0f2-4e5f-83e5-a48dd5fbbdb8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""aad6710d-0ed9-4f96-bdcf-5130e5e736c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""PassThrough"",
                    ""id"": ""62ff16de-2330-40da-8f2d-f81e64ca68c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sit"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c14461b4-62cf-4bb7-a73c-dd7c1f864b21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ViewVRMode"",
                    ""type"": ""Button"",
                    ""id"": ""fbe2810e-c282-418f-a744-f606e7b2ce33"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View1stPersonMode"",
                    ""type"": ""Button"",
                    ""id"": ""55241bd0-ccc6-49cc-be0a-f3ae076a2999"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View3rdPersonMode"",
                    ""type"": ""Button"",
                    ""id"": ""450d076d-75f6-4c0b-8fba-17489df7f99a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleEnableMovement"",
                    ""type"": ""Button"",
                    ""id"": ""e91c9670-188a-44b4-9bcf-ea242391410f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleLinkPanel"",
                    ""type"": ""Button"",
                    ""id"": ""0ce5e80a-ad59-491f-9ee8-db0362d25ccc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b3886e49-4fbc-4528-877f-3a0f9af7ede0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LockMouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4979b0a7-42cd-490a-b3d2-180aa6bb3254"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""2eca72ae-0ca1-4693-be06-e2ed493d7568"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""f914b37d-3110-4ca3-8b6b-f4df4a82769a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""030c31b5-4931-4903-aa97-26fcfe134096"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""a31a57b4-45e3-42a9-8eb4-cd80d15a8d1b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""86b9ab9f-1924-48f8-a0be-a1e692a9172b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""02a04e73-a2a0-4309-8ca4-92dc6cc1b4c9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""564f7e53-7452-4ef9-b926-c492aa54f3bc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""454d62f0-8c3d-4547-bc93-527b0061343f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""d6e1c44f-5eb5-49b3-880c-4b8a7f43cbb4"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4ff33be6-336c-4482-8eb9-964459fbacd1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(max=1)"",
                    ""groups"": ""Gamepad;Continuous Move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c74cfb5d-c40b-4bc5-9ac2-1d29ad61e529"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),ScaleVector2(x=5,y=5)"",
                    ""groups"": ""Keyboard&Mouse;Continuous Move"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62fb4a7f-7e6c-4d75-995c-40eefb60c895"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false),StickDeadzone(max=1),ScaleVector2(x=2000,y=2000)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c630322c-103a-44f0-8890-ea282b36b672"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72716d51-aba2-4112-b641-0c8d75279b06"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14ee3a04-4902-4a41-8409-08927d50dbdc"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87f90215-4af0-4c99-ab86-9a2ef0416105"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b015fd87-2402-4b7c-9b6f-daded9cfbbd7"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ViewVRMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48545d3d-0b39-4587-9b25-42408f65c5cf"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""View1stPersonMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ab85113-019c-463d-bf1a-b4ecd5034871"",
                    ""path"": ""<Keyboard>/f3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""View3rdPersonMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05f9fb65-d6dd-4366-9a04-26b31f9382ed"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""195174f0-5f7f-458e-a9b6-e6b0685d8dd9"",
                    ""path"": ""<Keyboard>/f4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ToggleEnableMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""867744a8-16f6-47e8-8764-d15d3694fc01"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""ToggleLinkPanel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e80b6e8b-43d4-4181-8fd8-7691c8823b0f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""LockMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f332589d-71d7-4e6a-ab70-c173c8d42733"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HandGesture"",
            ""id"": ""80bdb591-4efd-42d0-a053-5dcf523bb59e"",
            ""actions"": [
                {
                    ""name"": ""TeleportActivate"",
                    ""type"": ""Button"",
                    ""id"": ""fc923997-99fc-46ba-bf32-1eb33ff1b09c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TeleportSelect"",
                    ""type"": ""Button"",
                    ""id"": ""e750b0c3-e15b-46c1-b270-14cf4d3c5681"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TeleportCancel"",
                    ""type"": ""Button"",
                    ""id"": ""9c484959-b975-4841-b52d-ea08071b51eb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3c2c7fe0-707e-49a6-b936-a7058ae46f04"",
                    ""path"": ""<HandTeleportDevice>/activateButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TeleportActivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8516132-4738-4b4a-8460-e1515273c688"",
                    ""path"": ""<HandTeleportDevice>/selectButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TeleportSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6f56243-9ed3-4566-a167-e3c70b5c4728"",
                    ""path"": ""<HandTeleportDevice>/cancelButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TeleportCancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Generic XR Controller"",
            ""bindingGroup"": ""Generic XR Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<WMRHMD>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Continuous Move"",
            ""bindingGroup"": ""Continuous Move"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Noncontinuous Move"",
            ""bindingGroup"": ""Noncontinuous Move"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // XRI Head
        m_XRIHead = asset.FindActionMap("XRI Head", throwIfNotFound: true);
        m_XRIHead_Position = m_XRIHead.FindAction("Position", throwIfNotFound: true);
        m_XRIHead_GazePosition = m_XRIHead.FindAction("GazePosition", throwIfNotFound: true);
        m_XRIHead_Rotation = m_XRIHead.FindAction("Rotation", throwIfNotFound: true);
        m_XRIHead_GazeRotation = m_XRIHead.FindAction("GazeRotation", throwIfNotFound: true);
        m_XRIHead_IsTracked = m_XRIHead.FindAction("Is Tracked", throwIfNotFound: true);
        m_XRIHead_TrackingState = m_XRIHead.FindAction("Tracking State", throwIfNotFound: true);
        m_XRIHead_ViewVRMode = m_XRIHead.FindAction("ViewVRMode", throwIfNotFound: true);
        m_XRIHead_View1stPersonMode = m_XRIHead.FindAction("View1stPersonMode", throwIfNotFound: true);
        m_XRIHead_View3rdPersonMode = m_XRIHead.FindAction("View3rdPersonMode", throwIfNotFound: true);
        // XRI LeftHand
        m_XRILeftHand = asset.FindActionMap("XRI LeftHand", throwIfNotFound: true);
        m_XRILeftHand_IsTracked = m_XRILeftHand.FindAction("Is Tracked", throwIfNotFound: true);
        m_XRILeftHand_TrackingState = m_XRILeftHand.FindAction("Tracking State", throwIfNotFound: true);
        m_XRILeftHand_HapticDevice = m_XRILeftHand.FindAction("Haptic Device", throwIfNotFound: true);
        m_XRILeftHand_AimPosition = m_XRILeftHand.FindAction("Aim Position", throwIfNotFound: true);
        m_XRILeftHand_AimRotation = m_XRILeftHand.FindAction("Aim Rotation", throwIfNotFound: true);
        m_XRILeftHand_AimFlags = m_XRILeftHand.FindAction("Aim Flags", throwIfNotFound: true);
        m_XRILeftHand_PinchPosition = m_XRILeftHand.FindAction("Pinch Position", throwIfNotFound: true);
        m_XRILeftHand_PokePosition = m_XRILeftHand.FindAction("Poke Position", throwIfNotFound: true);
        m_XRILeftHand_PokeRotation = m_XRILeftHand.FindAction("Poke Rotation", throwIfNotFound: true);
        m_XRILeftHand_Menu = m_XRILeftHand.FindAction("Menu", throwIfNotFound: true);
        m_XRILeftHand_Thumbstick = m_XRILeftHand.FindAction("Thumbstick", throwIfNotFound: true);
        m_XRILeftHand_Position = m_XRILeftHand.FindAction("Position", throwIfNotFound: true);
        m_XRILeftHand_Rotation = m_XRILeftHand.FindAction("Rotation", throwIfNotFound: true);
        // XRI LeftHand Interaction
        m_XRILeftHandInteraction = asset.FindActionMap("XRI LeftHand Interaction", throwIfNotFound: true);
        m_XRILeftHandInteraction_Select = m_XRILeftHandInteraction.FindAction("Select", throwIfNotFound: true);
        m_XRILeftHandInteraction_SelectValue = m_XRILeftHandInteraction.FindAction("Select Value", throwIfNotFound: true);
        m_XRILeftHandInteraction_Activate = m_XRILeftHandInteraction.FindAction("Activate", throwIfNotFound: true);
        m_XRILeftHandInteraction_ActivateValue = m_XRILeftHandInteraction.FindAction("Activate Value", throwIfNotFound: true);
        m_XRILeftHandInteraction_UIPress = m_XRILeftHandInteraction.FindAction("UI Press", throwIfNotFound: true);
        m_XRILeftHandInteraction_UIPressValue = m_XRILeftHandInteraction.FindAction("UI Press Value", throwIfNotFound: true);
        m_XRILeftHandInteraction_UIScroll = m_XRILeftHandInteraction.FindAction("UI Scroll", throwIfNotFound: true);
        m_XRILeftHandInteraction_RotateManipulation = m_XRILeftHandInteraction.FindAction("Rotate Manipulation", throwIfNotFound: true);
        m_XRILeftHandInteraction_TranslateManipulation = m_XRILeftHandInteraction.FindAction("Translate Manipulation", throwIfNotFound: true);
        m_XRILeftHandInteraction_DirectionalManipulation = m_XRILeftHandInteraction.FindAction("Directional Manipulation", throwIfNotFound: true);
        m_XRILeftHandInteraction_Menu = m_XRILeftHandInteraction.FindAction("Menu", throwIfNotFound: true);
        // XRI LeftHand Locomotion
        m_XRILeftHandLocomotion = asset.FindActionMap("XRI LeftHand Locomotion", throwIfNotFound: true);
        m_XRILeftHandLocomotion_TeleportSelect = m_XRILeftHandLocomotion.FindAction("Teleport Select", throwIfNotFound: true);
        m_XRILeftHandLocomotion_TeleportModeActivate = m_XRILeftHandLocomotion.FindAction("Teleport Mode Activate", throwIfNotFound: true);
        m_XRILeftHandLocomotion_TeleportModeCancel = m_XRILeftHandLocomotion.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
        m_XRILeftHandLocomotion_TeleportDirection = m_XRILeftHandLocomotion.FindAction("Teleport Direction", throwIfNotFound: true);
        m_XRILeftHandLocomotion_Move = m_XRILeftHandLocomotion.FindAction("Move", throwIfNotFound: true);
        m_XRILeftHandLocomotion_GrabMove = m_XRILeftHandLocomotion.FindAction("Grab Move", throwIfNotFound: true);
        m_XRILeftHandLocomotion_SnapTurn = m_XRILeftHandLocomotion.FindAction("Snap Turn", throwIfNotFound: true);
        // XRI RightHand
        m_XRIRightHand = asset.FindActionMap("XRI RightHand", throwIfNotFound: true);
        m_XRIRightHand_Position = m_XRIRightHand.FindAction("Position", throwIfNotFound: true);
        m_XRIRightHand_Rotation = m_XRIRightHand.FindAction("Rotation", throwIfNotFound: true);
        m_XRIRightHand_IsTracked = m_XRIRightHand.FindAction("Is Tracked", throwIfNotFound: true);
        m_XRIRightHand_TrackingState = m_XRIRightHand.FindAction("Tracking State", throwIfNotFound: true);
        m_XRIRightHand_HapticDevice = m_XRIRightHand.FindAction("Haptic Device", throwIfNotFound: true);
        m_XRIRightHand_AimPosition = m_XRIRightHand.FindAction("Aim Position", throwIfNotFound: true);
        m_XRIRightHand_AimRotation = m_XRIRightHand.FindAction("Aim Rotation", throwIfNotFound: true);
        m_XRIRightHand_AimFlags = m_XRIRightHand.FindAction("Aim Flags", throwIfNotFound: true);
        m_XRIRightHand_PinchPosition = m_XRIRightHand.FindAction("Pinch Position", throwIfNotFound: true);
        m_XRIRightHand_PokePosition = m_XRIRightHand.FindAction("Poke Position", throwIfNotFound: true);
        m_XRIRightHand_PokeRotation = m_XRIRightHand.FindAction("Poke Rotation", throwIfNotFound: true);
        m_XRIRightHand_Menu = m_XRIRightHand.FindAction("Menu", throwIfNotFound: true);
        m_XRIRightHand_Thumbstick = m_XRIRightHand.FindAction("Thumbstick", throwIfNotFound: true);
        // XRI RightHand Interaction
        m_XRIRightHandInteraction = asset.FindActionMap("XRI RightHand Interaction", throwIfNotFound: true);
        m_XRIRightHandInteraction_Select = m_XRIRightHandInteraction.FindAction("Select", throwIfNotFound: true);
        m_XRIRightHandInteraction_SelectValue = m_XRIRightHandInteraction.FindAction("Select Value", throwIfNotFound: true);
        m_XRIRightHandInteraction_Activate = m_XRIRightHandInteraction.FindAction("Activate", throwIfNotFound: true);
        m_XRIRightHandInteraction_ActivateValue = m_XRIRightHandInteraction.FindAction("Activate Value", throwIfNotFound: true);
        m_XRIRightHandInteraction_UIPress = m_XRIRightHandInteraction.FindAction("UI Press", throwIfNotFound: true);
        m_XRIRightHandInteraction_UIPressValue = m_XRIRightHandInteraction.FindAction("UI Press Value", throwIfNotFound: true);
        m_XRIRightHandInteraction_UIScroll = m_XRIRightHandInteraction.FindAction("UI Scroll", throwIfNotFound: true);
        m_XRIRightHandInteraction_RotateManipulation = m_XRIRightHandInteraction.FindAction("Rotate Manipulation", throwIfNotFound: true);
        m_XRIRightHandInteraction_TranslateManipulation = m_XRIRightHandInteraction.FindAction("Translate Manipulation", throwIfNotFound: true);
        m_XRIRightHandInteraction_DirectionalManipulation = m_XRIRightHandInteraction.FindAction("Directional Manipulation", throwIfNotFound: true);
        m_XRIRightHandInteraction_Menu = m_XRIRightHandInteraction.FindAction("Menu", throwIfNotFound: true);
        // XRI RightHand Locomotion
        m_XRIRightHandLocomotion = asset.FindActionMap("XRI RightHand Locomotion", throwIfNotFound: true);
        m_XRIRightHandLocomotion_TeleportDirection = m_XRIRightHandLocomotion.FindAction("Teleport Direction", throwIfNotFound: true);
        m_XRIRightHandLocomotion_Move = m_XRIRightHandLocomotion.FindAction("Move", throwIfNotFound: true);
        m_XRIRightHandLocomotion_GrabMove = m_XRIRightHandLocomotion.FindAction("Grab Move", throwIfNotFound: true);
        m_XRIRightHandLocomotion_SnapTurn = m_XRIRightHandLocomotion.FindAction("Snap Turn", throwIfNotFound: true);
        m_XRIRightHandLocomotion_TeleportActivate = m_XRIRightHandLocomotion.FindAction("Teleport Activate", throwIfNotFound: true);
        m_XRIRightHandLocomotion_TeleportSelect = m_XRIRightHandLocomotion.FindAction("Teleport Select", throwIfNotFound: true);
        // XRI UI
        m_XRIUI = asset.FindActionMap("XRI UI", throwIfNotFound: true);
        m_XRIUI_Navigate = m_XRIUI.FindAction("Navigate", throwIfNotFound: true);
        m_XRIUI_Submit = m_XRIUI.FindAction("Submit", throwIfNotFound: true);
        m_XRIUI_Cancel = m_XRIUI.FindAction("Cancel", throwIfNotFound: true);
        m_XRIUI_Point = m_XRIUI.FindAction("Point", throwIfNotFound: true);
        m_XRIUI_Click = m_XRIUI.FindAction("Click", throwIfNotFound: true);
        m_XRIUI_ScrollWheel = m_XRIUI.FindAction("ScrollWheel", throwIfNotFound: true);
        m_XRIUI_MiddleClick = m_XRIUI.FindAction("MiddleClick", throwIfNotFound: true);
        m_XRIUI_RightClick = m_XRIUI.FindAction("RightClick", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
        m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
        m_UI_Cancel = m_UI.FindAction("Cancel", throwIfNotFound: true);
        m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_ScrollWheel = m_UI.FindAction("ScrollWheel", throwIfNotFound: true);
        m_UI_MiddleClick = m_UI.FindAction("MiddleClick", throwIfNotFound: true);
        m_UI_RightClick = m_UI.FindAction("RightClick", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_Sit = m_Player.FindAction("Sit", throwIfNotFound: true);
        m_Player_ViewVRMode = m_Player.FindAction("ViewVRMode", throwIfNotFound: true);
        m_Player_View1stPersonMode = m_Player.FindAction("View1stPersonMode", throwIfNotFound: true);
        m_Player_View3rdPersonMode = m_Player.FindAction("View3rdPersonMode", throwIfNotFound: true);
        m_Player_ToggleEnableMovement = m_Player.FindAction("ToggleEnableMovement", throwIfNotFound: true);
        m_Player_ToggleLinkPanel = m_Player.FindAction("ToggleLinkPanel", throwIfNotFound: true);
        m_Player_Zoom = m_Player.FindAction("Zoom", throwIfNotFound: true);
        m_Player_LockMouse = m_Player.FindAction("LockMouse", throwIfNotFound: true);
        // HandGesture
        m_HandGesture = asset.FindActionMap("HandGesture", throwIfNotFound: true);
        m_HandGesture_TeleportActivate = m_HandGesture.FindAction("TeleportActivate", throwIfNotFound: true);
        m_HandGesture_TeleportSelect = m_HandGesture.FindAction("TeleportSelect", throwIfNotFound: true);
        m_HandGesture_TeleportCancel = m_HandGesture.FindAction("TeleportCancel", throwIfNotFound: true);
    }

    ~@VrWebInputActions()
    {
        UnityEngine.Debug.Assert(!m_XRIHead.enabled, "This will cause a leak and performance issues, VrWebInputActions.XRIHead.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRILeftHand.enabled, "This will cause a leak and performance issues, VrWebInputActions.XRILeftHand.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRILeftHandInteraction.enabled, "This will cause a leak and performance issues, VrWebInputActions.XRILeftHandInteraction.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRILeftHandLocomotion.enabled, "This will cause a leak and performance issues, VrWebInputActions.XRILeftHandLocomotion.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRIRightHand.enabled, "This will cause a leak and performance issues, VrWebInputActions.XRIRightHand.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRIRightHandInteraction.enabled, "This will cause a leak and performance issues, VrWebInputActions.XRIRightHandInteraction.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRIRightHandLocomotion.enabled, "This will cause a leak and performance issues, VrWebInputActions.XRIRightHandLocomotion.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRIUI.enabled, "This will cause a leak and performance issues, VrWebInputActions.XRIUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, VrWebInputActions.UI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, VrWebInputActions.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_HandGesture.enabled, "This will cause a leak and performance issues, VrWebInputActions.HandGesture.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRI Head
    private readonly InputActionMap m_XRIHead;
    private List<IXRIHeadActions> m_XRIHeadActionsCallbackInterfaces = new List<IXRIHeadActions>();
    private readonly InputAction m_XRIHead_Position;
    private readonly InputAction m_XRIHead_GazePosition;
    private readonly InputAction m_XRIHead_Rotation;
    private readonly InputAction m_XRIHead_GazeRotation;
    private readonly InputAction m_XRIHead_IsTracked;
    private readonly InputAction m_XRIHead_TrackingState;
    private readonly InputAction m_XRIHead_ViewVRMode;
    private readonly InputAction m_XRIHead_View1stPersonMode;
    private readonly InputAction m_XRIHead_View3rdPersonMode;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI Head".
    /// </summary>
    public struct XRIHeadActions
    {
        private @VrWebInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRIHeadActions(@VrWebInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/Position".
        /// </summary>
        public InputAction @Position => m_Wrapper.m_XRIHead_Position;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/GazePosition".
        /// </summary>
        public InputAction @GazePosition => m_Wrapper.m_XRIHead_GazePosition;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/Rotation".
        /// </summary>
        public InputAction @Rotation => m_Wrapper.m_XRIHead_Rotation;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/GazeRotation".
        /// </summary>
        public InputAction @GazeRotation => m_Wrapper.m_XRIHead_GazeRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_XRIHead_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_XRIHead_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/ViewVRMode".
        /// </summary>
        public InputAction @ViewVRMode => m_Wrapper.m_XRIHead_ViewVRMode;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/View1stPersonMode".
        /// </summary>
        public InputAction @View1stPersonMode => m_Wrapper.m_XRIHead_View1stPersonMode;
        /// <summary>
        /// Provides access to the underlying input action "XRIHead/View3rdPersonMode".
        /// </summary>
        public InputAction @View3rdPersonMode => m_Wrapper.m_XRIHead_View3rdPersonMode;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRIHead; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRIHeadActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRIHeadActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRIHeadActions" />
        public void AddCallbacks(IXRIHeadActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @GazePosition.started += instance.OnGazePosition;
            @GazePosition.performed += instance.OnGazePosition;
            @GazePosition.canceled += instance.OnGazePosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @GazeRotation.started += instance.OnGazeRotation;
            @GazeRotation.performed += instance.OnGazeRotation;
            @GazeRotation.canceled += instance.OnGazeRotation;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @ViewVRMode.started += instance.OnViewVRMode;
            @ViewVRMode.performed += instance.OnViewVRMode;
            @ViewVRMode.canceled += instance.OnViewVRMode;
            @View1stPersonMode.started += instance.OnView1stPersonMode;
            @View1stPersonMode.performed += instance.OnView1stPersonMode;
            @View1stPersonMode.canceled += instance.OnView1stPersonMode;
            @View3rdPersonMode.started += instance.OnView3rdPersonMode;
            @View3rdPersonMode.performed += instance.OnView3rdPersonMode;
            @View3rdPersonMode.canceled += instance.OnView3rdPersonMode;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRIHeadActions" />
        private void UnregisterCallbacks(IXRIHeadActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @GazePosition.started -= instance.OnGazePosition;
            @GazePosition.performed -= instance.OnGazePosition;
            @GazePosition.canceled -= instance.OnGazePosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @GazeRotation.started -= instance.OnGazeRotation;
            @GazeRotation.performed -= instance.OnGazeRotation;
            @GazeRotation.canceled -= instance.OnGazeRotation;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @ViewVRMode.started -= instance.OnViewVRMode;
            @ViewVRMode.performed -= instance.OnViewVRMode;
            @ViewVRMode.canceled -= instance.OnViewVRMode;
            @View1stPersonMode.started -= instance.OnView1stPersonMode;
            @View1stPersonMode.performed -= instance.OnView1stPersonMode;
            @View1stPersonMode.canceled -= instance.OnView1stPersonMode;
            @View3rdPersonMode.started -= instance.OnView3rdPersonMode;
            @View3rdPersonMode.performed -= instance.OnView3rdPersonMode;
            @View3rdPersonMode.canceled -= instance.OnView3rdPersonMode;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRIHeadActions.UnregisterCallbacks(IXRIHeadActions)" />.
        /// </summary>
        /// <seealso cref="XRIHeadActions.UnregisterCallbacks(IXRIHeadActions)" />
        public void RemoveCallbacks(IXRIHeadActions instance)
        {
            if (m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRIHeadActions.AddCallbacks(IXRIHeadActions)" />
        /// <seealso cref="XRIHeadActions.RemoveCallbacks(IXRIHeadActions)" />
        /// <seealso cref="XRIHeadActions.UnregisterCallbacks(IXRIHeadActions)" />
        public void SetCallbacks(IXRIHeadActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIHeadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIHeadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRIHeadActions" /> instance referencing this action map.
    /// </summary>
    public XRIHeadActions @XRIHead => new XRIHeadActions(this);

    // XRI LeftHand
    private readonly InputActionMap m_XRILeftHand;
    private List<IXRILeftHandActions> m_XRILeftHandActionsCallbackInterfaces = new List<IXRILeftHandActions>();
    private readonly InputAction m_XRILeftHand_IsTracked;
    private readonly InputAction m_XRILeftHand_TrackingState;
    private readonly InputAction m_XRILeftHand_HapticDevice;
    private readonly InputAction m_XRILeftHand_AimPosition;
    private readonly InputAction m_XRILeftHand_AimRotation;
    private readonly InputAction m_XRILeftHand_AimFlags;
    private readonly InputAction m_XRILeftHand_PinchPosition;
    private readonly InputAction m_XRILeftHand_PokePosition;
    private readonly InputAction m_XRILeftHand_PokeRotation;
    private readonly InputAction m_XRILeftHand_Menu;
    private readonly InputAction m_XRILeftHand_Thumbstick;
    private readonly InputAction m_XRILeftHand_Position;
    private readonly InputAction m_XRILeftHand_Rotation;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI LeftHand".
    /// </summary>
    public struct XRILeftHandActions
    {
        private @VrWebInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRILeftHandActions(@VrWebInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_XRILeftHand_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_XRILeftHand_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/HapticDevice".
        /// </summary>
        public InputAction @HapticDevice => m_Wrapper.m_XRILeftHand_HapticDevice;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/AimPosition".
        /// </summary>
        public InputAction @AimPosition => m_Wrapper.m_XRILeftHand_AimPosition;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/AimRotation".
        /// </summary>
        public InputAction @AimRotation => m_Wrapper.m_XRILeftHand_AimRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/AimFlags".
        /// </summary>
        public InputAction @AimFlags => m_Wrapper.m_XRILeftHand_AimFlags;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/PinchPosition".
        /// </summary>
        public InputAction @PinchPosition => m_Wrapper.m_XRILeftHand_PinchPosition;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/PokePosition".
        /// </summary>
        public InputAction @PokePosition => m_Wrapper.m_XRILeftHand_PokePosition;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/PokeRotation".
        /// </summary>
        public InputAction @PokeRotation => m_Wrapper.m_XRILeftHand_PokeRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/Menu".
        /// </summary>
        public InputAction @Menu => m_Wrapper.m_XRILeftHand_Menu;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/Thumbstick".
        /// </summary>
        public InputAction @Thumbstick => m_Wrapper.m_XRILeftHand_Thumbstick;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/Position".
        /// </summary>
        public InputAction @Position => m_Wrapper.m_XRILeftHand_Position;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHand/Rotation".
        /// </summary>
        public InputAction @Rotation => m_Wrapper.m_XRILeftHand_Rotation;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRILeftHand; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRILeftHandActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRILeftHandActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRILeftHandActions" />
        public void AddCallbacks(IXRILeftHandActions instance)
        {
            if (instance == null || m_Wrapper.m_XRILeftHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRILeftHandActionsCallbackInterfaces.Add(instance);
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @HapticDevice.started += instance.OnHapticDevice;
            @HapticDevice.performed += instance.OnHapticDevice;
            @HapticDevice.canceled += instance.OnHapticDevice;
            @AimPosition.started += instance.OnAimPosition;
            @AimPosition.performed += instance.OnAimPosition;
            @AimPosition.canceled += instance.OnAimPosition;
            @AimRotation.started += instance.OnAimRotation;
            @AimRotation.performed += instance.OnAimRotation;
            @AimRotation.canceled += instance.OnAimRotation;
            @AimFlags.started += instance.OnAimFlags;
            @AimFlags.performed += instance.OnAimFlags;
            @AimFlags.canceled += instance.OnAimFlags;
            @PinchPosition.started += instance.OnPinchPosition;
            @PinchPosition.performed += instance.OnPinchPosition;
            @PinchPosition.canceled += instance.OnPinchPosition;
            @PokePosition.started += instance.OnPokePosition;
            @PokePosition.performed += instance.OnPokePosition;
            @PokePosition.canceled += instance.OnPokePosition;
            @PokeRotation.started += instance.OnPokeRotation;
            @PokeRotation.performed += instance.OnPokeRotation;
            @PokeRotation.canceled += instance.OnPokeRotation;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @Thumbstick.started += instance.OnThumbstick;
            @Thumbstick.performed += instance.OnThumbstick;
            @Thumbstick.canceled += instance.OnThumbstick;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRILeftHandActions" />
        private void UnregisterCallbacks(IXRILeftHandActions instance)
        {
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @HapticDevice.started -= instance.OnHapticDevice;
            @HapticDevice.performed -= instance.OnHapticDevice;
            @HapticDevice.canceled -= instance.OnHapticDevice;
            @AimPosition.started -= instance.OnAimPosition;
            @AimPosition.performed -= instance.OnAimPosition;
            @AimPosition.canceled -= instance.OnAimPosition;
            @AimRotation.started -= instance.OnAimRotation;
            @AimRotation.performed -= instance.OnAimRotation;
            @AimRotation.canceled -= instance.OnAimRotation;
            @AimFlags.started -= instance.OnAimFlags;
            @AimFlags.performed -= instance.OnAimFlags;
            @AimFlags.canceled -= instance.OnAimFlags;
            @PinchPosition.started -= instance.OnPinchPosition;
            @PinchPosition.performed -= instance.OnPinchPosition;
            @PinchPosition.canceled -= instance.OnPinchPosition;
            @PokePosition.started -= instance.OnPokePosition;
            @PokePosition.performed -= instance.OnPokePosition;
            @PokePosition.canceled -= instance.OnPokePosition;
            @PokeRotation.started -= instance.OnPokeRotation;
            @PokeRotation.performed -= instance.OnPokeRotation;
            @PokeRotation.canceled -= instance.OnPokeRotation;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @Thumbstick.started -= instance.OnThumbstick;
            @Thumbstick.performed -= instance.OnThumbstick;
            @Thumbstick.canceled -= instance.OnThumbstick;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRILeftHandActions.UnregisterCallbacks(IXRILeftHandActions)" />.
        /// </summary>
        /// <seealso cref="XRILeftHandActions.UnregisterCallbacks(IXRILeftHandActions)" />
        public void RemoveCallbacks(IXRILeftHandActions instance)
        {
            if (m_Wrapper.m_XRILeftHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRILeftHandActions.AddCallbacks(IXRILeftHandActions)" />
        /// <seealso cref="XRILeftHandActions.RemoveCallbacks(IXRILeftHandActions)" />
        /// <seealso cref="XRILeftHandActions.UnregisterCallbacks(IXRILeftHandActions)" />
        public void SetCallbacks(IXRILeftHandActions instance)
        {
            foreach (var item in m_Wrapper.m_XRILeftHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRILeftHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRILeftHandActions" /> instance referencing this action map.
    /// </summary>
    public XRILeftHandActions @XRILeftHand => new XRILeftHandActions(this);

    // XRI LeftHand Interaction
    private readonly InputActionMap m_XRILeftHandInteraction;
    private List<IXRILeftHandInteractionActions> m_XRILeftHandInteractionActionsCallbackInterfaces = new List<IXRILeftHandInteractionActions>();
    private readonly InputAction m_XRILeftHandInteraction_Select;
    private readonly InputAction m_XRILeftHandInteraction_SelectValue;
    private readonly InputAction m_XRILeftHandInteraction_Activate;
    private readonly InputAction m_XRILeftHandInteraction_ActivateValue;
    private readonly InputAction m_XRILeftHandInteraction_UIPress;
    private readonly InputAction m_XRILeftHandInteraction_UIPressValue;
    private readonly InputAction m_XRILeftHandInteraction_UIScroll;
    private readonly InputAction m_XRILeftHandInteraction_RotateManipulation;
    private readonly InputAction m_XRILeftHandInteraction_TranslateManipulation;
    private readonly InputAction m_XRILeftHandInteraction_DirectionalManipulation;
    private readonly InputAction m_XRILeftHandInteraction_Menu;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI LeftHand Interaction".
    /// </summary>
    public struct XRILeftHandInteractionActions
    {
        private @VrWebInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRILeftHandInteractionActions(@VrWebInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandInteraction/Select".
        /// </summary>
        public InputAction @Select => m_Wrapper.m_XRILeftHandInteraction_Select;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandInteraction/SelectValue".
        /// </summary>
        public InputAction @SelectValue => m_Wrapper.m_XRILeftHandInteraction_SelectValue;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandInteraction/Activate".
        /// </summary>
        public InputAction @Activate => m_Wrapper.m_XRILeftHandInteraction_Activate;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandInteraction/ActivateValue".
        /// </summary>
        public InputAction @ActivateValue => m_Wrapper.m_XRILeftHandInteraction_ActivateValue;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandInteraction/UIPress".
        /// </summary>
        public InputAction @UIPress => m_Wrapper.m_XRILeftHandInteraction_UIPress;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandInteraction/UIPressValue".
        /// </summary>
        public InputAction @UIPressValue => m_Wrapper.m_XRILeftHandInteraction_UIPressValue;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandInteraction/UIScroll".
        /// </summary>
        public InputAction @UIScroll => m_Wrapper.m_XRILeftHandInteraction_UIScroll;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandInteraction/RotateManipulation".
        /// </summary>
        public InputAction @RotateManipulation => m_Wrapper.m_XRILeftHandInteraction_RotateManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandInteraction/TranslateManipulation".
        /// </summary>
        public InputAction @TranslateManipulation => m_Wrapper.m_XRILeftHandInteraction_TranslateManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandInteraction/DirectionalManipulation".
        /// </summary>
        public InputAction @DirectionalManipulation => m_Wrapper.m_XRILeftHandInteraction_DirectionalManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandInteraction/Menu".
        /// </summary>
        public InputAction @Menu => m_Wrapper.m_XRILeftHandInteraction_Menu;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRILeftHandInteraction; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRILeftHandInteractionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRILeftHandInteractionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRILeftHandInteractionActions" />
        public void AddCallbacks(IXRILeftHandInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @SelectValue.started += instance.OnSelectValue;
            @SelectValue.performed += instance.OnSelectValue;
            @SelectValue.canceled += instance.OnSelectValue;
            @Activate.started += instance.OnActivate;
            @Activate.performed += instance.OnActivate;
            @Activate.canceled += instance.OnActivate;
            @ActivateValue.started += instance.OnActivateValue;
            @ActivateValue.performed += instance.OnActivateValue;
            @ActivateValue.canceled += instance.OnActivateValue;
            @UIPress.started += instance.OnUIPress;
            @UIPress.performed += instance.OnUIPress;
            @UIPress.canceled += instance.OnUIPress;
            @UIPressValue.started += instance.OnUIPressValue;
            @UIPressValue.performed += instance.OnUIPressValue;
            @UIPressValue.canceled += instance.OnUIPressValue;
            @UIScroll.started += instance.OnUIScroll;
            @UIScroll.performed += instance.OnUIScroll;
            @UIScroll.canceled += instance.OnUIScroll;
            @RotateManipulation.started += instance.OnRotateManipulation;
            @RotateManipulation.performed += instance.OnRotateManipulation;
            @RotateManipulation.canceled += instance.OnRotateManipulation;
            @TranslateManipulation.started += instance.OnTranslateManipulation;
            @TranslateManipulation.performed += instance.OnTranslateManipulation;
            @TranslateManipulation.canceled += instance.OnTranslateManipulation;
            @DirectionalManipulation.started += instance.OnDirectionalManipulation;
            @DirectionalManipulation.performed += instance.OnDirectionalManipulation;
            @DirectionalManipulation.canceled += instance.OnDirectionalManipulation;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRILeftHandInteractionActions" />
        private void UnregisterCallbacks(IXRILeftHandInteractionActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @SelectValue.started -= instance.OnSelectValue;
            @SelectValue.performed -= instance.OnSelectValue;
            @SelectValue.canceled -= instance.OnSelectValue;
            @Activate.started -= instance.OnActivate;
            @Activate.performed -= instance.OnActivate;
            @Activate.canceled -= instance.OnActivate;
            @ActivateValue.started -= instance.OnActivateValue;
            @ActivateValue.performed -= instance.OnActivateValue;
            @ActivateValue.canceled -= instance.OnActivateValue;
            @UIPress.started -= instance.OnUIPress;
            @UIPress.performed -= instance.OnUIPress;
            @UIPress.canceled -= instance.OnUIPress;
            @UIPressValue.started -= instance.OnUIPressValue;
            @UIPressValue.performed -= instance.OnUIPressValue;
            @UIPressValue.canceled -= instance.OnUIPressValue;
            @UIScroll.started -= instance.OnUIScroll;
            @UIScroll.performed -= instance.OnUIScroll;
            @UIScroll.canceled -= instance.OnUIScroll;
            @RotateManipulation.started -= instance.OnRotateManipulation;
            @RotateManipulation.performed -= instance.OnRotateManipulation;
            @RotateManipulation.canceled -= instance.OnRotateManipulation;
            @TranslateManipulation.started -= instance.OnTranslateManipulation;
            @TranslateManipulation.performed -= instance.OnTranslateManipulation;
            @TranslateManipulation.canceled -= instance.OnTranslateManipulation;
            @DirectionalManipulation.started -= instance.OnDirectionalManipulation;
            @DirectionalManipulation.performed -= instance.OnDirectionalManipulation;
            @DirectionalManipulation.canceled -= instance.OnDirectionalManipulation;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRILeftHandInteractionActions.UnregisterCallbacks(IXRILeftHandInteractionActions)" />.
        /// </summary>
        /// <seealso cref="XRILeftHandInteractionActions.UnregisterCallbacks(IXRILeftHandInteractionActions)" />
        public void RemoveCallbacks(IXRILeftHandInteractionActions instance)
        {
            if (m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRILeftHandInteractionActions.AddCallbacks(IXRILeftHandInteractionActions)" />
        /// <seealso cref="XRILeftHandInteractionActions.RemoveCallbacks(IXRILeftHandInteractionActions)" />
        /// <seealso cref="XRILeftHandInteractionActions.UnregisterCallbacks(IXRILeftHandInteractionActions)" />
        public void SetCallbacks(IXRILeftHandInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRILeftHandInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRILeftHandInteractionActions" /> instance referencing this action map.
    /// </summary>
    public XRILeftHandInteractionActions @XRILeftHandInteraction => new XRILeftHandInteractionActions(this);

    // XRI LeftHand Locomotion
    private readonly InputActionMap m_XRILeftHandLocomotion;
    private List<IXRILeftHandLocomotionActions> m_XRILeftHandLocomotionActionsCallbackInterfaces = new List<IXRILeftHandLocomotionActions>();
    private readonly InputAction m_XRILeftHandLocomotion_TeleportSelect;
    private readonly InputAction m_XRILeftHandLocomotion_TeleportModeActivate;
    private readonly InputAction m_XRILeftHandLocomotion_TeleportModeCancel;
    private readonly InputAction m_XRILeftHandLocomotion_TeleportDirection;
    private readonly InputAction m_XRILeftHandLocomotion_Move;
    private readonly InputAction m_XRILeftHandLocomotion_GrabMove;
    private readonly InputAction m_XRILeftHandLocomotion_SnapTurn;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI LeftHand Locomotion".
    /// </summary>
    public struct XRILeftHandLocomotionActions
    {
        private @VrWebInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRILeftHandLocomotionActions(@VrWebInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandLocomotion/TeleportSelect".
        /// </summary>
        public InputAction @TeleportSelect => m_Wrapper.m_XRILeftHandLocomotion_TeleportSelect;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandLocomotion/TeleportModeActivate".
        /// </summary>
        public InputAction @TeleportModeActivate => m_Wrapper.m_XRILeftHandLocomotion_TeleportModeActivate;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandLocomotion/TeleportModeCancel".
        /// </summary>
        public InputAction @TeleportModeCancel => m_Wrapper.m_XRILeftHandLocomotion_TeleportModeCancel;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandLocomotion/TeleportDirection".
        /// </summary>
        public InputAction @TeleportDirection => m_Wrapper.m_XRILeftHandLocomotion_TeleportDirection;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandLocomotion/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_XRILeftHandLocomotion_Move;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandLocomotion/GrabMove".
        /// </summary>
        public InputAction @GrabMove => m_Wrapper.m_XRILeftHandLocomotion_GrabMove;
        /// <summary>
        /// Provides access to the underlying input action "XRILeftHandLocomotion/SnapTurn".
        /// </summary>
        public InputAction @SnapTurn => m_Wrapper.m_XRILeftHandLocomotion_SnapTurn;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRILeftHandLocomotion; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRILeftHandLocomotionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRILeftHandLocomotionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRILeftHandLocomotionActions" />
        public void AddCallbacks(IXRILeftHandLocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterfaces.Add(instance);
            @TeleportSelect.started += instance.OnTeleportSelect;
            @TeleportSelect.performed += instance.OnTeleportSelect;
            @TeleportSelect.canceled += instance.OnTeleportSelect;
            @TeleportModeActivate.started += instance.OnTeleportModeActivate;
            @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
            @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
            @TeleportModeCancel.started += instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
            @TeleportDirection.started += instance.OnTeleportDirection;
            @TeleportDirection.performed += instance.OnTeleportDirection;
            @TeleportDirection.canceled += instance.OnTeleportDirection;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @GrabMove.started += instance.OnGrabMove;
            @GrabMove.performed += instance.OnGrabMove;
            @GrabMove.canceled += instance.OnGrabMove;
            @SnapTurn.started += instance.OnSnapTurn;
            @SnapTurn.performed += instance.OnSnapTurn;
            @SnapTurn.canceled += instance.OnSnapTurn;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRILeftHandLocomotionActions" />
        private void UnregisterCallbacks(IXRILeftHandLocomotionActions instance)
        {
            @TeleportSelect.started -= instance.OnTeleportSelect;
            @TeleportSelect.performed -= instance.OnTeleportSelect;
            @TeleportSelect.canceled -= instance.OnTeleportSelect;
            @TeleportModeActivate.started -= instance.OnTeleportModeActivate;
            @TeleportModeActivate.performed -= instance.OnTeleportModeActivate;
            @TeleportModeActivate.canceled -= instance.OnTeleportModeActivate;
            @TeleportModeCancel.started -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled -= instance.OnTeleportModeCancel;
            @TeleportDirection.started -= instance.OnTeleportDirection;
            @TeleportDirection.performed -= instance.OnTeleportDirection;
            @TeleportDirection.canceled -= instance.OnTeleportDirection;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @GrabMove.started -= instance.OnGrabMove;
            @GrabMove.performed -= instance.OnGrabMove;
            @GrabMove.canceled -= instance.OnGrabMove;
            @SnapTurn.started -= instance.OnSnapTurn;
            @SnapTurn.performed -= instance.OnSnapTurn;
            @SnapTurn.canceled -= instance.OnSnapTurn;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRILeftHandLocomotionActions.UnregisterCallbacks(IXRILeftHandLocomotionActions)" />.
        /// </summary>
        /// <seealso cref="XRILeftHandLocomotionActions.UnregisterCallbacks(IXRILeftHandLocomotionActions)" />
        public void RemoveCallbacks(IXRILeftHandLocomotionActions instance)
        {
            if (m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRILeftHandLocomotionActions.AddCallbacks(IXRILeftHandLocomotionActions)" />
        /// <seealso cref="XRILeftHandLocomotionActions.RemoveCallbacks(IXRILeftHandLocomotionActions)" />
        /// <seealso cref="XRILeftHandLocomotionActions.UnregisterCallbacks(IXRILeftHandLocomotionActions)" />
        public void SetCallbacks(IXRILeftHandLocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRILeftHandLocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRILeftHandLocomotionActions" /> instance referencing this action map.
    /// </summary>
    public XRILeftHandLocomotionActions @XRILeftHandLocomotion => new XRILeftHandLocomotionActions(this);

    // XRI RightHand
    private readonly InputActionMap m_XRIRightHand;
    private List<IXRIRightHandActions> m_XRIRightHandActionsCallbackInterfaces = new List<IXRIRightHandActions>();
    private readonly InputAction m_XRIRightHand_Position;
    private readonly InputAction m_XRIRightHand_Rotation;
    private readonly InputAction m_XRIRightHand_IsTracked;
    private readonly InputAction m_XRIRightHand_TrackingState;
    private readonly InputAction m_XRIRightHand_HapticDevice;
    private readonly InputAction m_XRIRightHand_AimPosition;
    private readonly InputAction m_XRIRightHand_AimRotation;
    private readonly InputAction m_XRIRightHand_AimFlags;
    private readonly InputAction m_XRIRightHand_PinchPosition;
    private readonly InputAction m_XRIRightHand_PokePosition;
    private readonly InputAction m_XRIRightHand_PokeRotation;
    private readonly InputAction m_XRIRightHand_Menu;
    private readonly InputAction m_XRIRightHand_Thumbstick;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI RightHand".
    /// </summary>
    public struct XRIRightHandActions
    {
        private @VrWebInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRIRightHandActions(@VrWebInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/Position".
        /// </summary>
        public InputAction @Position => m_Wrapper.m_XRIRightHand_Position;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/Rotation".
        /// </summary>
        public InputAction @Rotation => m_Wrapper.m_XRIRightHand_Rotation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/IsTracked".
        /// </summary>
        public InputAction @IsTracked => m_Wrapper.m_XRIRightHand_IsTracked;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_XRIRightHand_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/HapticDevice".
        /// </summary>
        public InputAction @HapticDevice => m_Wrapper.m_XRIRightHand_HapticDevice;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/AimPosition".
        /// </summary>
        public InputAction @AimPosition => m_Wrapper.m_XRIRightHand_AimPosition;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/AimRotation".
        /// </summary>
        public InputAction @AimRotation => m_Wrapper.m_XRIRightHand_AimRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/AimFlags".
        /// </summary>
        public InputAction @AimFlags => m_Wrapper.m_XRIRightHand_AimFlags;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/PinchPosition".
        /// </summary>
        public InputAction @PinchPosition => m_Wrapper.m_XRIRightHand_PinchPosition;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/PokePosition".
        /// </summary>
        public InputAction @PokePosition => m_Wrapper.m_XRIRightHand_PokePosition;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/PokeRotation".
        /// </summary>
        public InputAction @PokeRotation => m_Wrapper.m_XRIRightHand_PokeRotation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/Menu".
        /// </summary>
        public InputAction @Menu => m_Wrapper.m_XRIRightHand_Menu;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHand/Thumbstick".
        /// </summary>
        public InputAction @Thumbstick => m_Wrapper.m_XRIRightHand_Thumbstick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRIRightHand; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRIRightHandActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRIRightHandActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRIRightHandActions" />
        public void AddCallbacks(IXRIRightHandActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIRightHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIRightHandActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @HapticDevice.started += instance.OnHapticDevice;
            @HapticDevice.performed += instance.OnHapticDevice;
            @HapticDevice.canceled += instance.OnHapticDevice;
            @AimPosition.started += instance.OnAimPosition;
            @AimPosition.performed += instance.OnAimPosition;
            @AimPosition.canceled += instance.OnAimPosition;
            @AimRotation.started += instance.OnAimRotation;
            @AimRotation.performed += instance.OnAimRotation;
            @AimRotation.canceled += instance.OnAimRotation;
            @AimFlags.started += instance.OnAimFlags;
            @AimFlags.performed += instance.OnAimFlags;
            @AimFlags.canceled += instance.OnAimFlags;
            @PinchPosition.started += instance.OnPinchPosition;
            @PinchPosition.performed += instance.OnPinchPosition;
            @PinchPosition.canceled += instance.OnPinchPosition;
            @PokePosition.started += instance.OnPokePosition;
            @PokePosition.performed += instance.OnPokePosition;
            @PokePosition.canceled += instance.OnPokePosition;
            @PokeRotation.started += instance.OnPokeRotation;
            @PokeRotation.performed += instance.OnPokeRotation;
            @PokeRotation.canceled += instance.OnPokeRotation;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @Thumbstick.started += instance.OnThumbstick;
            @Thumbstick.performed += instance.OnThumbstick;
            @Thumbstick.canceled += instance.OnThumbstick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRIRightHandActions" />
        private void UnregisterCallbacks(IXRIRightHandActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @HapticDevice.started -= instance.OnHapticDevice;
            @HapticDevice.performed -= instance.OnHapticDevice;
            @HapticDevice.canceled -= instance.OnHapticDevice;
            @AimPosition.started -= instance.OnAimPosition;
            @AimPosition.performed -= instance.OnAimPosition;
            @AimPosition.canceled -= instance.OnAimPosition;
            @AimRotation.started -= instance.OnAimRotation;
            @AimRotation.performed -= instance.OnAimRotation;
            @AimRotation.canceled -= instance.OnAimRotation;
            @AimFlags.started -= instance.OnAimFlags;
            @AimFlags.performed -= instance.OnAimFlags;
            @AimFlags.canceled -= instance.OnAimFlags;
            @PinchPosition.started -= instance.OnPinchPosition;
            @PinchPosition.performed -= instance.OnPinchPosition;
            @PinchPosition.canceled -= instance.OnPinchPosition;
            @PokePosition.started -= instance.OnPokePosition;
            @PokePosition.performed -= instance.OnPokePosition;
            @PokePosition.canceled -= instance.OnPokePosition;
            @PokeRotation.started -= instance.OnPokeRotation;
            @PokeRotation.performed -= instance.OnPokeRotation;
            @PokeRotation.canceled -= instance.OnPokeRotation;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @Thumbstick.started -= instance.OnThumbstick;
            @Thumbstick.performed -= instance.OnThumbstick;
            @Thumbstick.canceled -= instance.OnThumbstick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRIRightHandActions.UnregisterCallbacks(IXRIRightHandActions)" />.
        /// </summary>
        /// <seealso cref="XRIRightHandActions.UnregisterCallbacks(IXRIRightHandActions)" />
        public void RemoveCallbacks(IXRIRightHandActions instance)
        {
            if (m_Wrapper.m_XRIRightHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRIRightHandActions.AddCallbacks(IXRIRightHandActions)" />
        /// <seealso cref="XRIRightHandActions.RemoveCallbacks(IXRIRightHandActions)" />
        /// <seealso cref="XRIRightHandActions.UnregisterCallbacks(IXRIRightHandActions)" />
        public void SetCallbacks(IXRIRightHandActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIRightHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIRightHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRIRightHandActions" /> instance referencing this action map.
    /// </summary>
    public XRIRightHandActions @XRIRightHand => new XRIRightHandActions(this);

    // XRI RightHand Interaction
    private readonly InputActionMap m_XRIRightHandInteraction;
    private List<IXRIRightHandInteractionActions> m_XRIRightHandInteractionActionsCallbackInterfaces = new List<IXRIRightHandInteractionActions>();
    private readonly InputAction m_XRIRightHandInteraction_Select;
    private readonly InputAction m_XRIRightHandInteraction_SelectValue;
    private readonly InputAction m_XRIRightHandInteraction_Activate;
    private readonly InputAction m_XRIRightHandInteraction_ActivateValue;
    private readonly InputAction m_XRIRightHandInteraction_UIPress;
    private readonly InputAction m_XRIRightHandInteraction_UIPressValue;
    private readonly InputAction m_XRIRightHandInteraction_UIScroll;
    private readonly InputAction m_XRIRightHandInteraction_RotateManipulation;
    private readonly InputAction m_XRIRightHandInteraction_TranslateManipulation;
    private readonly InputAction m_XRIRightHandInteraction_DirectionalManipulation;
    private readonly InputAction m_XRIRightHandInteraction_Menu;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI RightHand Interaction".
    /// </summary>
    public struct XRIRightHandInteractionActions
    {
        private @VrWebInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRIRightHandInteractionActions(@VrWebInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandInteraction/Select".
        /// </summary>
        public InputAction @Select => m_Wrapper.m_XRIRightHandInteraction_Select;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandInteraction/SelectValue".
        /// </summary>
        public InputAction @SelectValue => m_Wrapper.m_XRIRightHandInteraction_SelectValue;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandInteraction/Activate".
        /// </summary>
        public InputAction @Activate => m_Wrapper.m_XRIRightHandInteraction_Activate;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandInteraction/ActivateValue".
        /// </summary>
        public InputAction @ActivateValue => m_Wrapper.m_XRIRightHandInteraction_ActivateValue;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandInteraction/UIPress".
        /// </summary>
        public InputAction @UIPress => m_Wrapper.m_XRIRightHandInteraction_UIPress;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandInteraction/UIPressValue".
        /// </summary>
        public InputAction @UIPressValue => m_Wrapper.m_XRIRightHandInteraction_UIPressValue;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandInteraction/UIScroll".
        /// </summary>
        public InputAction @UIScroll => m_Wrapper.m_XRIRightHandInteraction_UIScroll;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandInteraction/RotateManipulation".
        /// </summary>
        public InputAction @RotateManipulation => m_Wrapper.m_XRIRightHandInteraction_RotateManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandInteraction/TranslateManipulation".
        /// </summary>
        public InputAction @TranslateManipulation => m_Wrapper.m_XRIRightHandInteraction_TranslateManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandInteraction/DirectionalManipulation".
        /// </summary>
        public InputAction @DirectionalManipulation => m_Wrapper.m_XRIRightHandInteraction_DirectionalManipulation;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandInteraction/Menu".
        /// </summary>
        public InputAction @Menu => m_Wrapper.m_XRIRightHandInteraction_Menu;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRIRightHandInteraction; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRIRightHandInteractionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRIRightHandInteractionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRIRightHandInteractionActions" />
        public void AddCallbacks(IXRIRightHandInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @SelectValue.started += instance.OnSelectValue;
            @SelectValue.performed += instance.OnSelectValue;
            @SelectValue.canceled += instance.OnSelectValue;
            @Activate.started += instance.OnActivate;
            @Activate.performed += instance.OnActivate;
            @Activate.canceled += instance.OnActivate;
            @ActivateValue.started += instance.OnActivateValue;
            @ActivateValue.performed += instance.OnActivateValue;
            @ActivateValue.canceled += instance.OnActivateValue;
            @UIPress.started += instance.OnUIPress;
            @UIPress.performed += instance.OnUIPress;
            @UIPress.canceled += instance.OnUIPress;
            @UIPressValue.started += instance.OnUIPressValue;
            @UIPressValue.performed += instance.OnUIPressValue;
            @UIPressValue.canceled += instance.OnUIPressValue;
            @UIScroll.started += instance.OnUIScroll;
            @UIScroll.performed += instance.OnUIScroll;
            @UIScroll.canceled += instance.OnUIScroll;
            @RotateManipulation.started += instance.OnRotateManipulation;
            @RotateManipulation.performed += instance.OnRotateManipulation;
            @RotateManipulation.canceled += instance.OnRotateManipulation;
            @TranslateManipulation.started += instance.OnTranslateManipulation;
            @TranslateManipulation.performed += instance.OnTranslateManipulation;
            @TranslateManipulation.canceled += instance.OnTranslateManipulation;
            @DirectionalManipulation.started += instance.OnDirectionalManipulation;
            @DirectionalManipulation.performed += instance.OnDirectionalManipulation;
            @DirectionalManipulation.canceled += instance.OnDirectionalManipulation;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRIRightHandInteractionActions" />
        private void UnregisterCallbacks(IXRIRightHandInteractionActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @SelectValue.started -= instance.OnSelectValue;
            @SelectValue.performed -= instance.OnSelectValue;
            @SelectValue.canceled -= instance.OnSelectValue;
            @Activate.started -= instance.OnActivate;
            @Activate.performed -= instance.OnActivate;
            @Activate.canceled -= instance.OnActivate;
            @ActivateValue.started -= instance.OnActivateValue;
            @ActivateValue.performed -= instance.OnActivateValue;
            @ActivateValue.canceled -= instance.OnActivateValue;
            @UIPress.started -= instance.OnUIPress;
            @UIPress.performed -= instance.OnUIPress;
            @UIPress.canceled -= instance.OnUIPress;
            @UIPressValue.started -= instance.OnUIPressValue;
            @UIPressValue.performed -= instance.OnUIPressValue;
            @UIPressValue.canceled -= instance.OnUIPressValue;
            @UIScroll.started -= instance.OnUIScroll;
            @UIScroll.performed -= instance.OnUIScroll;
            @UIScroll.canceled -= instance.OnUIScroll;
            @RotateManipulation.started -= instance.OnRotateManipulation;
            @RotateManipulation.performed -= instance.OnRotateManipulation;
            @RotateManipulation.canceled -= instance.OnRotateManipulation;
            @TranslateManipulation.started -= instance.OnTranslateManipulation;
            @TranslateManipulation.performed -= instance.OnTranslateManipulation;
            @TranslateManipulation.canceled -= instance.OnTranslateManipulation;
            @DirectionalManipulation.started -= instance.OnDirectionalManipulation;
            @DirectionalManipulation.performed -= instance.OnDirectionalManipulation;
            @DirectionalManipulation.canceled -= instance.OnDirectionalManipulation;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRIRightHandInteractionActions.UnregisterCallbacks(IXRIRightHandInteractionActions)" />.
        /// </summary>
        /// <seealso cref="XRIRightHandInteractionActions.UnregisterCallbacks(IXRIRightHandInteractionActions)" />
        public void RemoveCallbacks(IXRIRightHandInteractionActions instance)
        {
            if (m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRIRightHandInteractionActions.AddCallbacks(IXRIRightHandInteractionActions)" />
        /// <seealso cref="XRIRightHandInteractionActions.RemoveCallbacks(IXRIRightHandInteractionActions)" />
        /// <seealso cref="XRIRightHandInteractionActions.UnregisterCallbacks(IXRIRightHandInteractionActions)" />
        public void SetCallbacks(IXRIRightHandInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIRightHandInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRIRightHandInteractionActions" /> instance referencing this action map.
    /// </summary>
    public XRIRightHandInteractionActions @XRIRightHandInteraction => new XRIRightHandInteractionActions(this);

    // XRI RightHand Locomotion
    private readonly InputActionMap m_XRIRightHandLocomotion;
    private List<IXRIRightHandLocomotionActions> m_XRIRightHandLocomotionActionsCallbackInterfaces = new List<IXRIRightHandLocomotionActions>();
    private readonly InputAction m_XRIRightHandLocomotion_TeleportDirection;
    private readonly InputAction m_XRIRightHandLocomotion_Move;
    private readonly InputAction m_XRIRightHandLocomotion_GrabMove;
    private readonly InputAction m_XRIRightHandLocomotion_SnapTurn;
    private readonly InputAction m_XRIRightHandLocomotion_TeleportActivate;
    private readonly InputAction m_XRIRightHandLocomotion_TeleportSelect;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI RightHand Locomotion".
    /// </summary>
    public struct XRIRightHandLocomotionActions
    {
        private @VrWebInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRIRightHandLocomotionActions(@VrWebInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandLocomotion/TeleportDirection".
        /// </summary>
        public InputAction @TeleportDirection => m_Wrapper.m_XRIRightHandLocomotion_TeleportDirection;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandLocomotion/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_XRIRightHandLocomotion_Move;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandLocomotion/GrabMove".
        /// </summary>
        public InputAction @GrabMove => m_Wrapper.m_XRIRightHandLocomotion_GrabMove;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandLocomotion/SnapTurn".
        /// </summary>
        public InputAction @SnapTurn => m_Wrapper.m_XRIRightHandLocomotion_SnapTurn;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandLocomotion/TeleportActivate".
        /// </summary>
        public InputAction @TeleportActivate => m_Wrapper.m_XRIRightHandLocomotion_TeleportActivate;
        /// <summary>
        /// Provides access to the underlying input action "XRIRightHandLocomotion/TeleportSelect".
        /// </summary>
        public InputAction @TeleportSelect => m_Wrapper.m_XRIRightHandLocomotion_TeleportSelect;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRIRightHandLocomotion; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRIRightHandLocomotionActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRIRightHandLocomotionActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRIRightHandLocomotionActions" />
        public void AddCallbacks(IXRIRightHandLocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterfaces.Add(instance);
            @TeleportDirection.started += instance.OnTeleportDirection;
            @TeleportDirection.performed += instance.OnTeleportDirection;
            @TeleportDirection.canceled += instance.OnTeleportDirection;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @GrabMove.started += instance.OnGrabMove;
            @GrabMove.performed += instance.OnGrabMove;
            @GrabMove.canceled += instance.OnGrabMove;
            @SnapTurn.started += instance.OnSnapTurn;
            @SnapTurn.performed += instance.OnSnapTurn;
            @SnapTurn.canceled += instance.OnSnapTurn;
            @TeleportActivate.started += instance.OnTeleportActivate;
            @TeleportActivate.performed += instance.OnTeleportActivate;
            @TeleportActivate.canceled += instance.OnTeleportActivate;
            @TeleportSelect.started += instance.OnTeleportSelect;
            @TeleportSelect.performed += instance.OnTeleportSelect;
            @TeleportSelect.canceled += instance.OnTeleportSelect;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRIRightHandLocomotionActions" />
        private void UnregisterCallbacks(IXRIRightHandLocomotionActions instance)
        {
            @TeleportDirection.started -= instance.OnTeleportDirection;
            @TeleportDirection.performed -= instance.OnTeleportDirection;
            @TeleportDirection.canceled -= instance.OnTeleportDirection;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @GrabMove.started -= instance.OnGrabMove;
            @GrabMove.performed -= instance.OnGrabMove;
            @GrabMove.canceled -= instance.OnGrabMove;
            @SnapTurn.started -= instance.OnSnapTurn;
            @SnapTurn.performed -= instance.OnSnapTurn;
            @SnapTurn.canceled -= instance.OnSnapTurn;
            @TeleportActivate.started -= instance.OnTeleportActivate;
            @TeleportActivate.performed -= instance.OnTeleportActivate;
            @TeleportActivate.canceled -= instance.OnTeleportActivate;
            @TeleportSelect.started -= instance.OnTeleportSelect;
            @TeleportSelect.performed -= instance.OnTeleportSelect;
            @TeleportSelect.canceled -= instance.OnTeleportSelect;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRIRightHandLocomotionActions.UnregisterCallbacks(IXRIRightHandLocomotionActions)" />.
        /// </summary>
        /// <seealso cref="XRIRightHandLocomotionActions.UnregisterCallbacks(IXRIRightHandLocomotionActions)" />
        public void RemoveCallbacks(IXRIRightHandLocomotionActions instance)
        {
            if (m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRIRightHandLocomotionActions.AddCallbacks(IXRIRightHandLocomotionActions)" />
        /// <seealso cref="XRIRightHandLocomotionActions.RemoveCallbacks(IXRIRightHandLocomotionActions)" />
        /// <seealso cref="XRIRightHandLocomotionActions.UnregisterCallbacks(IXRIRightHandLocomotionActions)" />
        public void SetCallbacks(IXRIRightHandLocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIRightHandLocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRIRightHandLocomotionActions" /> instance referencing this action map.
    /// </summary>
    public XRIRightHandLocomotionActions @XRIRightHandLocomotion => new XRIRightHandLocomotionActions(this);

    // XRI UI
    private readonly InputActionMap m_XRIUI;
    private List<IXRIUIActions> m_XRIUIActionsCallbackInterfaces = new List<IXRIUIActions>();
    private readonly InputAction m_XRIUI_Navigate;
    private readonly InputAction m_XRIUI_Submit;
    private readonly InputAction m_XRIUI_Cancel;
    private readonly InputAction m_XRIUI_Point;
    private readonly InputAction m_XRIUI_Click;
    private readonly InputAction m_XRIUI_ScrollWheel;
    private readonly InputAction m_XRIUI_MiddleClick;
    private readonly InputAction m_XRIUI_RightClick;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRI UI".
    /// </summary>
    public struct XRIUIActions
    {
        private @VrWebInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRIUIActions(@VrWebInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/Navigate".
        /// </summary>
        public InputAction @Navigate => m_Wrapper.m_XRIUI_Navigate;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/Submit".
        /// </summary>
        public InputAction @Submit => m_Wrapper.m_XRIUI_Submit;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/Cancel".
        /// </summary>
        public InputAction @Cancel => m_Wrapper.m_XRIUI_Cancel;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/Point".
        /// </summary>
        public InputAction @Point => m_Wrapper.m_XRIUI_Point;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/Click".
        /// </summary>
        public InputAction @Click => m_Wrapper.m_XRIUI_Click;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/ScrollWheel".
        /// </summary>
        public InputAction @ScrollWheel => m_Wrapper.m_XRIUI_ScrollWheel;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/MiddleClick".
        /// </summary>
        public InputAction @MiddleClick => m_Wrapper.m_XRIUI_MiddleClick;
        /// <summary>
        /// Provides access to the underlying input action "XRIUI/RightClick".
        /// </summary>
        public InputAction @RightClick => m_Wrapper.m_XRIUI_RightClick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRIUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRIUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRIUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRIUIActions" />
        public void AddCallbacks(IXRIUIActions instance)
        {
            if (instance == null || m_Wrapper.m_XRIUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRIUIActionsCallbackInterfaces.Add(instance);
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @ScrollWheel.started += instance.OnScrollWheel;
            @ScrollWheel.performed += instance.OnScrollWheel;
            @ScrollWheel.canceled += instance.OnScrollWheel;
            @MiddleClick.started += instance.OnMiddleClick;
            @MiddleClick.performed += instance.OnMiddleClick;
            @MiddleClick.canceled += instance.OnMiddleClick;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRIUIActions" />
        private void UnregisterCallbacks(IXRIUIActions instance)
        {
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @ScrollWheel.started -= instance.OnScrollWheel;
            @ScrollWheel.performed -= instance.OnScrollWheel;
            @ScrollWheel.canceled -= instance.OnScrollWheel;
            @MiddleClick.started -= instance.OnMiddleClick;
            @MiddleClick.performed -= instance.OnMiddleClick;
            @MiddleClick.canceled -= instance.OnMiddleClick;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRIUIActions.UnregisterCallbacks(IXRIUIActions)" />.
        /// </summary>
        /// <seealso cref="XRIUIActions.UnregisterCallbacks(IXRIUIActions)" />
        public void RemoveCallbacks(IXRIUIActions instance)
        {
            if (m_Wrapper.m_XRIUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRIUIActions.AddCallbacks(IXRIUIActions)" />
        /// <seealso cref="XRIUIActions.RemoveCallbacks(IXRIUIActions)" />
        /// <seealso cref="XRIUIActions.UnregisterCallbacks(IXRIUIActions)" />
        public void SetCallbacks(IXRIUIActions instance)
        {
            foreach (var item in m_Wrapper.m_XRIUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRIUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRIUIActions" /> instance referencing this action map.
    /// </summary>
    public XRIUIActions @XRIUI => new XRIUIActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Navigate;
    private readonly InputAction m_UI_Submit;
    private readonly InputAction m_UI_Cancel;
    private readonly InputAction m_UI_Point;
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_ScrollWheel;
    private readonly InputAction m_UI_MiddleClick;
    private readonly InputAction m_UI_RightClick;
    /// <summary>
    /// Provides access to input actions defined in input action map "UI".
    /// </summary>
    public struct UIActions
    {
        private @VrWebInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UIActions(@VrWebInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "UI/Navigate".
        /// </summary>
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        /// <summary>
        /// Provides access to the underlying input action "UI/Submit".
        /// </summary>
        public InputAction @Submit => m_Wrapper.m_UI_Submit;
        /// <summary>
        /// Provides access to the underlying input action "UI/Cancel".
        /// </summary>
        public InputAction @Cancel => m_Wrapper.m_UI_Cancel;
        /// <summary>
        /// Provides access to the underlying input action "UI/Point".
        /// </summary>
        public InputAction @Point => m_Wrapper.m_UI_Point;
        /// <summary>
        /// Provides access to the underlying input action "UI/Click".
        /// </summary>
        public InputAction @Click => m_Wrapper.m_UI_Click;
        /// <summary>
        /// Provides access to the underlying input action "UI/ScrollWheel".
        /// </summary>
        public InputAction @ScrollWheel => m_Wrapper.m_UI_ScrollWheel;
        /// <summary>
        /// Provides access to the underlying input action "UI/MiddleClick".
        /// </summary>
        public InputAction @MiddleClick => m_Wrapper.m_UI_MiddleClick;
        /// <summary>
        /// Provides access to the underlying input action "UI/RightClick".
        /// </summary>
        public InputAction @RightClick => m_Wrapper.m_UI_RightClick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UIActions" />
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @ScrollWheel.started += instance.OnScrollWheel;
            @ScrollWheel.performed += instance.OnScrollWheel;
            @ScrollWheel.canceled += instance.OnScrollWheel;
            @MiddleClick.started += instance.OnMiddleClick;
            @MiddleClick.performed += instance.OnMiddleClick;
            @MiddleClick.canceled += instance.OnMiddleClick;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UIActions" />
        private void UnregisterCallbacks(IUIActions instance)
        {
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @ScrollWheel.started -= instance.OnScrollWheel;
            @ScrollWheel.performed -= instance.OnScrollWheel;
            @ScrollWheel.canceled -= instance.OnScrollWheel;
            @MiddleClick.started -= instance.OnMiddleClick;
            @MiddleClick.performed -= instance.OnMiddleClick;
            @MiddleClick.canceled -= instance.OnMiddleClick;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UIActions.UnregisterCallbacks(IUIActions)" />.
        /// </summary>
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UIActions" /> instance referencing this action map.
    /// </summary>
    public UIActions @UI => new UIActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Look;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_Sit;
    private readonly InputAction m_Player_ViewVRMode;
    private readonly InputAction m_Player_View1stPersonMode;
    private readonly InputAction m_Player_View3rdPersonMode;
    private readonly InputAction m_Player_ToggleEnableMovement;
    private readonly InputAction m_Player_ToggleLinkPanel;
    private readonly InputAction m_Player_Zoom;
    private readonly InputAction m_Player_LockMouse;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player".
    /// </summary>
    public struct PlayerActions
    {
        private @VrWebInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public PlayerActions(@VrWebInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_Player_Move;
        /// <summary>
        /// Provides access to the underlying input action "Player/Look".
        /// </summary>
        public InputAction @Look => m_Wrapper.m_Player_Look;
        /// <summary>
        /// Provides access to the underlying input action "Player/Jump".
        /// </summary>
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        /// <summary>
        /// Provides access to the underlying input action "Player/Sprint".
        /// </summary>
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        /// <summary>
        /// Provides access to the underlying input action "Player/Sit".
        /// </summary>
        public InputAction @Sit => m_Wrapper.m_Player_Sit;
        /// <summary>
        /// Provides access to the underlying input action "Player/ViewVRMode".
        /// </summary>
        public InputAction @ViewVRMode => m_Wrapper.m_Player_ViewVRMode;
        /// <summary>
        /// Provides access to the underlying input action "Player/View1stPersonMode".
        /// </summary>
        public InputAction @View1stPersonMode => m_Wrapper.m_Player_View1stPersonMode;
        /// <summary>
        /// Provides access to the underlying input action "Player/View3rdPersonMode".
        /// </summary>
        public InputAction @View3rdPersonMode => m_Wrapper.m_Player_View3rdPersonMode;
        /// <summary>
        /// Provides access to the underlying input action "Player/ToggleEnableMovement".
        /// </summary>
        public InputAction @ToggleEnableMovement => m_Wrapper.m_Player_ToggleEnableMovement;
        /// <summary>
        /// Provides access to the underlying input action "Player/ToggleLinkPanel".
        /// </summary>
        public InputAction @ToggleLinkPanel => m_Wrapper.m_Player_ToggleLinkPanel;
        /// <summary>
        /// Provides access to the underlying input action "Player/Zoom".
        /// </summary>
        public InputAction @Zoom => m_Wrapper.m_Player_Zoom;
        /// <summary>
        /// Provides access to the underlying input action "Player/LockMouse".
        /// </summary>
        public InputAction @LockMouse => m_Wrapper.m_Player_LockMouse;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="PlayerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Sit.started += instance.OnSit;
            @Sit.performed += instance.OnSit;
            @Sit.canceled += instance.OnSit;
            @ViewVRMode.started += instance.OnViewVRMode;
            @ViewVRMode.performed += instance.OnViewVRMode;
            @ViewVRMode.canceled += instance.OnViewVRMode;
            @View1stPersonMode.started += instance.OnView1stPersonMode;
            @View1stPersonMode.performed += instance.OnView1stPersonMode;
            @View1stPersonMode.canceled += instance.OnView1stPersonMode;
            @View3rdPersonMode.started += instance.OnView3rdPersonMode;
            @View3rdPersonMode.performed += instance.OnView3rdPersonMode;
            @View3rdPersonMode.canceled += instance.OnView3rdPersonMode;
            @ToggleEnableMovement.started += instance.OnToggleEnableMovement;
            @ToggleEnableMovement.performed += instance.OnToggleEnableMovement;
            @ToggleEnableMovement.canceled += instance.OnToggleEnableMovement;
            @ToggleLinkPanel.started += instance.OnToggleLinkPanel;
            @ToggleLinkPanel.performed += instance.OnToggleLinkPanel;
            @ToggleLinkPanel.canceled += instance.OnToggleLinkPanel;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @LockMouse.started += instance.OnLockMouse;
            @LockMouse.performed += instance.OnLockMouse;
            @LockMouse.canceled += instance.OnLockMouse;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="PlayerActions" />
        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Sit.started -= instance.OnSit;
            @Sit.performed -= instance.OnSit;
            @Sit.canceled -= instance.OnSit;
            @ViewVRMode.started -= instance.OnViewVRMode;
            @ViewVRMode.performed -= instance.OnViewVRMode;
            @ViewVRMode.canceled -= instance.OnViewVRMode;
            @View1stPersonMode.started -= instance.OnView1stPersonMode;
            @View1stPersonMode.performed -= instance.OnView1stPersonMode;
            @View1stPersonMode.canceled -= instance.OnView1stPersonMode;
            @View3rdPersonMode.started -= instance.OnView3rdPersonMode;
            @View3rdPersonMode.performed -= instance.OnView3rdPersonMode;
            @View3rdPersonMode.canceled -= instance.OnView3rdPersonMode;
            @ToggleEnableMovement.started -= instance.OnToggleEnableMovement;
            @ToggleEnableMovement.performed -= instance.OnToggleEnableMovement;
            @ToggleEnableMovement.canceled -= instance.OnToggleEnableMovement;
            @ToggleLinkPanel.started -= instance.OnToggleLinkPanel;
            @ToggleLinkPanel.performed -= instance.OnToggleLinkPanel;
            @ToggleLinkPanel.canceled -= instance.OnToggleLinkPanel;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @LockMouse.started -= instance.OnLockMouse;
            @LockMouse.performed -= instance.OnLockMouse;
            @LockMouse.canceled -= instance.OnLockMouse;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />.
        /// </summary>
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
        /// <seealso cref="PlayerActions.UnregisterCallbacks(IPlayerActions)" />
        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="PlayerActions" /> instance referencing this action map.
    /// </summary>
    public PlayerActions @Player => new PlayerActions(this);

    // HandGesture
    private readonly InputActionMap m_HandGesture;
    private List<IHandGestureActions> m_HandGestureActionsCallbackInterfaces = new List<IHandGestureActions>();
    private readonly InputAction m_HandGesture_TeleportActivate;
    private readonly InputAction m_HandGesture_TeleportSelect;
    private readonly InputAction m_HandGesture_TeleportCancel;
    /// <summary>
    /// Provides access to input actions defined in input action map "HandGesture".
    /// </summary>
    public struct HandGestureActions
    {
        private @VrWebInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public HandGestureActions(@VrWebInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "HandGesture/TeleportActivate".
        /// </summary>
        public InputAction @TeleportActivate => m_Wrapper.m_HandGesture_TeleportActivate;
        /// <summary>
        /// Provides access to the underlying input action "HandGesture/TeleportSelect".
        /// </summary>
        public InputAction @TeleportSelect => m_Wrapper.m_HandGesture_TeleportSelect;
        /// <summary>
        /// Provides access to the underlying input action "HandGesture/TeleportCancel".
        /// </summary>
        public InputAction @TeleportCancel => m_Wrapper.m_HandGesture_TeleportCancel;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_HandGesture; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="HandGestureActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(HandGestureActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="HandGestureActions" />
        public void AddCallbacks(IHandGestureActions instance)
        {
            if (instance == null || m_Wrapper.m_HandGestureActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HandGestureActionsCallbackInterfaces.Add(instance);
            @TeleportActivate.started += instance.OnTeleportActivate;
            @TeleportActivate.performed += instance.OnTeleportActivate;
            @TeleportActivate.canceled += instance.OnTeleportActivate;
            @TeleportSelect.started += instance.OnTeleportSelect;
            @TeleportSelect.performed += instance.OnTeleportSelect;
            @TeleportSelect.canceled += instance.OnTeleportSelect;
            @TeleportCancel.started += instance.OnTeleportCancel;
            @TeleportCancel.performed += instance.OnTeleportCancel;
            @TeleportCancel.canceled += instance.OnTeleportCancel;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="HandGestureActions" />
        private void UnregisterCallbacks(IHandGestureActions instance)
        {
            @TeleportActivate.started -= instance.OnTeleportActivate;
            @TeleportActivate.performed -= instance.OnTeleportActivate;
            @TeleportActivate.canceled -= instance.OnTeleportActivate;
            @TeleportSelect.started -= instance.OnTeleportSelect;
            @TeleportSelect.performed -= instance.OnTeleportSelect;
            @TeleportSelect.canceled -= instance.OnTeleportSelect;
            @TeleportCancel.started -= instance.OnTeleportCancel;
            @TeleportCancel.performed -= instance.OnTeleportCancel;
            @TeleportCancel.canceled -= instance.OnTeleportCancel;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="HandGestureActions.UnregisterCallbacks(IHandGestureActions)" />.
        /// </summary>
        /// <seealso cref="HandGestureActions.UnregisterCallbacks(IHandGestureActions)" />
        public void RemoveCallbacks(IHandGestureActions instance)
        {
            if (m_Wrapper.m_HandGestureActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="HandGestureActions.AddCallbacks(IHandGestureActions)" />
        /// <seealso cref="HandGestureActions.RemoveCallbacks(IHandGestureActions)" />
        /// <seealso cref="HandGestureActions.UnregisterCallbacks(IHandGestureActions)" />
        public void SetCallbacks(IHandGestureActions instance)
        {
            foreach (var item in m_Wrapper.m_HandGestureActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HandGestureActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="HandGestureActions" /> instance referencing this action map.
    /// </summary>
    public HandGestureActions @HandGesture => new HandGestureActions(this);
    private int m_GenericXRControllerSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme GenericXRControllerScheme
    {
        get
        {
            if (m_GenericXRControllerSchemeIndex == -1) m_GenericXRControllerSchemeIndex = asset.FindControlSchemeIndex("Generic XR Controller");
            return asset.controlSchemes[m_GenericXRControllerSchemeIndex];
        }
    }
    private int m_ContinuousMoveSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme ContinuousMoveScheme
    {
        get
        {
            if (m_ContinuousMoveSchemeIndex == -1) m_ContinuousMoveSchemeIndex = asset.FindControlSchemeIndex("Continuous Move");
            return asset.controlSchemes[m_ContinuousMoveSchemeIndex];
        }
    }
    private int m_NoncontinuousMoveSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme NoncontinuousMoveScheme
    {
        get
        {
            if (m_NoncontinuousMoveSchemeIndex == -1) m_NoncontinuousMoveSchemeIndex = asset.FindControlSchemeIndex("Noncontinuous Move");
            return asset.controlSchemes[m_NoncontinuousMoveSchemeIndex];
        }
    }
    private int m_KeyboardMouseSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI Head" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRIHeadActions.AddCallbacks(IXRIHeadActions)" />
    /// <seealso cref="XRIHeadActions.RemoveCallbacks(IXRIHeadActions)" />
    public interface IXRIHeadActions
    {
        /// <summary>
        /// Method invoked when associated input action "Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GazePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGazePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GazeRotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGazeRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Is Tracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Tracking State" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ViewVRMode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnViewVRMode(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "View1stPersonMode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnView1stPersonMode(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "View3rdPersonMode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnView3rdPersonMode(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI LeftHand" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRILeftHandActions.AddCallbacks(IXRILeftHandActions)" />
    /// <seealso cref="XRILeftHandActions.RemoveCallbacks(IXRILeftHandActions)" />
    public interface IXRILeftHandActions
    {
        /// <summary>
        /// Method invoked when associated input action "Is Tracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Tracking State" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Haptic Device" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHapticDevice(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Aim Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Aim Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Aim Flags" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimFlags(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pinch Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Poke Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Poke Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokeRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Menu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenu(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Thumbstick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnThumbstick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotation(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI LeftHand Interaction" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRILeftHandInteractionActions.AddCallbacks(IXRILeftHandInteractionActions)" />
    /// <seealso cref="XRILeftHandInteractionActions.RemoveCallbacks(IXRILeftHandInteractionActions)" />
    public interface IXRILeftHandInteractionActions
    {
        /// <summary>
        /// Method invoked when associated input action "Select" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Select Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Activate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActivate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Activate Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActivateValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Press" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Press Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIPressValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Scroll" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIScroll(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Translate Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTranslateManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Directional Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDirectionalManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Menu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenu(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI LeftHand Locomotion" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRILeftHandLocomotionActions.AddCallbacks(IXRILeftHandLocomotionActions)" />
    /// <seealso cref="XRILeftHandLocomotionActions.RemoveCallbacks(IXRILeftHandLocomotionActions)" />
    public interface IXRILeftHandLocomotionActions
    {
        /// <summary>
        /// Method invoked when associated input action "Teleport Select" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Teleport Mode Activate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportModeActivate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Teleport Mode Cancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportModeCancel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Teleport Direction" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportDirection(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grab Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrabMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Snap Turn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSnapTurn(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI RightHand" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRIRightHandActions.AddCallbacks(IXRIRightHandActions)" />
    /// <seealso cref="XRIRightHandActions.RemoveCallbacks(IXRIRightHandActions)" />
    public interface IXRIRightHandActions
    {
        /// <summary>
        /// Method invoked when associated input action "Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Is Tracked" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnIsTracked(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Tracking State" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Haptic Device" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHapticDevice(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Aim Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Aim Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Aim Flags" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAimFlags(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pinch Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPinchPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Poke Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Poke Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPokeRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Menu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenu(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Thumbstick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnThumbstick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI RightHand Interaction" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRIRightHandInteractionActions.AddCallbacks(IXRIRightHandInteractionActions)" />
    /// <seealso cref="XRIRightHandInteractionActions.RemoveCallbacks(IXRIRightHandInteractionActions)" />
    public interface IXRIRightHandInteractionActions
    {
        /// <summary>
        /// Method invoked when associated input action "Select" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Select Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Activate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActivate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Activate Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActivateValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Press" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIPress(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Press Value" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIPressValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "UI Scroll" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnUIScroll(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotate Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotateManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Translate Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTranslateManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Directional Manipulation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDirectionalManipulation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Menu" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenu(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI RightHand Locomotion" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRIRightHandLocomotionActions.AddCallbacks(IXRIRightHandLocomotionActions)" />
    /// <seealso cref="XRIRightHandLocomotionActions.RemoveCallbacks(IXRIRightHandLocomotionActions)" />
    public interface IXRIRightHandLocomotionActions
    {
        /// <summary>
        /// Method invoked when associated input action "Teleport Direction" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportDirection(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grab Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrabMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Snap Turn" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSnapTurn(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Teleport Activate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportActivate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Teleport Select" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportSelect(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRI UI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRIUIActions.AddCallbacks(IXRIUIActions)" />
    /// <seealso cref="XRIUIActions.RemoveCallbacks(IXRIUIActions)" />
    public interface IXRIUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "Navigate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNavigate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Submit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSubmit(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Cancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Point" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPoint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ScrollWheel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScrollWheel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MiddleClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMiddleClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightClick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
    /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
    public interface IUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "Navigate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNavigate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Submit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSubmit(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Cancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Point" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPoint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Click" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ScrollWheel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScrollWheel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MiddleClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMiddleClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightClick(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="PlayerActions.AddCallbacks(IPlayerActions)" />
    /// <seealso cref="PlayerActions.RemoveCallbacks(IPlayerActions)" />
    public interface IPlayerActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Look" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLook(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJump(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Sprint" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSprint(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Sit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSit(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ViewVRMode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnViewVRMode(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "View1stPersonMode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnView1stPersonMode(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "View3rdPersonMode" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnView3rdPersonMode(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ToggleEnableMovement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToggleEnableMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ToggleLinkPanel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToggleLinkPanel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Zoom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnZoom(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LockMouse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLockMouse(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "HandGesture" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="HandGestureActions.AddCallbacks(IHandGestureActions)" />
    /// <seealso cref="HandGestureActions.RemoveCallbacks(IHandGestureActions)" />
    public interface IHandGestureActions
    {
        /// <summary>
        /// Method invoked when associated input action "TeleportActivate" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportActivate(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TeleportSelect" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TeleportCancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTeleportCancel(InputAction.CallbackContext context);
    }
}
